// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Config.proto

#include "Config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_Config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectInfo_Config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HitRate_Config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HitScore_Config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimulationInfo_Config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemInfo_Config_2eproto;
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
} _Config_default_instance_;
class ConnectInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectInfo> _instance;
} _ConnectInfo_default_instance_;
class SystemInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemInfo> _instance;
} _SystemInfo_default_instance_;
class HitScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HitScore> _instance;
} _HitScore_default_instance_;
class HitRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HitRate> _instance;
} _HitRate_default_instance_;
class SimulationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationInfo> _instance;
} _SimulationInfo_default_instance_;
static void InitDefaultsscc_info_Config_Config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Config_default_instance_;
    new (ptr) ::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Config_Config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Config_Config_2eproto}, {
      &scc_info_ConnectInfo_Config_2eproto.base,
      &scc_info_SystemInfo_Config_2eproto.base,
      &scc_info_SimulationInfo_Config_2eproto.base,}};

static void InitDefaultsscc_info_ConnectInfo_Config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConnectInfo_default_instance_;
    new (ptr) ::ConnectInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectInfo_Config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectInfo_Config_2eproto}, {}};

static void InitDefaultsscc_info_HitRate_Config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HitRate_default_instance_;
    new (ptr) ::HitRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HitRate_Config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HitRate_Config_2eproto}, {}};

static void InitDefaultsscc_info_HitScore_Config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HitScore_default_instance_;
    new (ptr) ::HitScore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HitScore_Config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HitScore_Config_2eproto}, {}};

static void InitDefaultsscc_info_SimulationInfo_Config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SimulationInfo_default_instance_;
    new (ptr) ::SimulationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimulationInfo_Config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimulationInfo_Config_2eproto}, {
      &scc_info_HitScore_Config_2eproto.base,
      &scc_info_HitRate_Config_2eproto.base,}};

static void InitDefaultsscc_info_SystemInfo_Config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SystemInfo_default_instance_;
    new (ptr) ::SystemInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemInfo_Config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SystemInfo_Config_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Config_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Config_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Config_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Config_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config, coninfo_),
  PROTOBUF_FIELD_OFFSET(::Config, sysinfo_),
  PROTOBUF_FIELD_OFFSET(::Config, siminfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConnectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConnectInfo, sip_),
  PROTOBUF_FIELD_OFFSET(::ConnectInfo, sport_),
  PROTOBUF_FIELD_OFFSET(::ConnectInfo, scomname_),
  PROTOBUF_FIELD_OFFSET(::ConnectInfo, contype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SystemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SystemInfo, ndelehitline_),
  PROTOBUF_FIELD_OFFSET(::SystemInfo, bopenbroad_),
  PROTOBUF_FIELD_OFFSET(::SystemInfo, bopenboard_),
  PROTOBUF_FIELD_OFFSET(::SystemInfo, bopensound_),
  PROTOBUF_FIELD_OFFSET(::SystemInfo, bopenswind_),
  PROTOBUF_FIELD_OFFSET(::SystemInfo, nopenspeak_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HitScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HitScore, hitpart_),
  PROTOBUF_FIELD_OFFSET(::HitScore, nscore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HitRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HitRate, hitpart_),
  PROTOBUF_FIELD_OFFSET(::HitRate, nrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SimulationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SimulationInfo, nsycntime_),
  PROTOBUF_FIELD_OFFSET(::SimulationInfo, ntime2drop_),
  PROTOBUF_FIELD_OFFSET(::SimulationInfo, ninitbullets_),
  PROTOBUF_FIELD_OFFSET(::SimulationInfo, bkillself_),
  PROTOBUF_FIELD_OFFSET(::SimulationInfo, bdeakill_),
  PROTOBUF_FIELD_OFFSET(::SimulationInfo, scoreset_),
  PROTOBUF_FIELD_OFFSET(::SimulationInfo, rateset_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Config)},
  { 8, -1, sizeof(::ConnectInfo)},
  { 17, -1, sizeof(::SystemInfo)},
  { 28, -1, sizeof(::HitScore)},
  { 35, -1, sizeof(::HitRate)},
  { 42, -1, sizeof(::SimulationInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConnectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SystemInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HitScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HitRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SimulationInfo_default_instance_),
};

const char descriptor_table_protodef_Config_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Config.proto\032\020TypeDefine.proto\"g\n\006Conf"
  "ig\022\035\n\007conInfo\030\001 \001(\0132\014.ConnectInfo\022\034\n\007sys"
  "Info\030\002 \001(\0132\013.SystemInfo\022 \n\007simInfo\030\003 \001(\013"
  "2\017.SimulationInfo\"X\n\013ConnectInfo\022\013\n\003sIP\030"
  "\001 \001(\t\022\r\n\005sPort\030\002 \001(\r\022\020\n\010sComName\030\003 \001(\t\022\033"
  "\n\007conType\030\004 \001(\0162\n.CONN_TYPE\"\206\001\n\nSystemIn"
  "fo\022\024\n\014nDeleHitLine\030\001 \001(\005\022\022\n\nbOpenBroad\030\002"
  " \001(\010\022\022\n\nbOpenBoard\030\003 \001(\010\022\022\n\nbOpenSound\030\004"
  " \001(\010\022\022\n\nbOpenSWind\030\005 \001(\010\022\022\n\nnOpenSpeak\030\006"
  " \001(\005\"9\n\010HitScore\022\035\n\007hitPart\030\001 \001(\0162\014.PERS"
  "ON_PART\022\016\n\006nScore\030\002 \001(\005\"7\n\007HitRate\022\035\n\007hi"
  "tPart\030\001 \001(\0162\014.PERSON_PART\022\r\n\005nRate\030\002 \001(\005"
  "\"\252\001\n\016SimulationInfo\022\021\n\tnSycnTime\030\001 \001(\005\022\022"
  "\n\nnTime2Drop\030\002 \001(\005\022\024\n\014nInitbullets\030\003 \001(\005"
  "\022\021\n\tbKillSelf\030\004 \001(\010\022\020\n\010bDeaKill\030\005 \001(\010\022\033\n"
  "\010scoreSet\030\006 \003(\0132\t.HitScore\022\031\n\007rateSet\030\007 "
  "\003(\0132\010.HitRateb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Config_2eproto_deps[1] = {
  &::descriptor_table_TypeDefine_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Config_2eproto_sccs[6] = {
  &scc_info_Config_Config_2eproto.base,
  &scc_info_ConnectInfo_Config_2eproto.base,
  &scc_info_HitRate_Config_2eproto.base,
  &scc_info_HitScore_Config_2eproto.base,
  &scc_info_SimulationInfo_Config_2eproto.base,
  &scc_info_SystemInfo_Config_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Config_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Config_2eproto = {
  false, false, descriptor_table_protodef_Config_2eproto, "Config.proto", 661,
  &descriptor_table_Config_2eproto_once, descriptor_table_Config_2eproto_sccs, descriptor_table_Config_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_Config_2eproto::offsets,
  file_level_metadata_Config_2eproto, 6, file_level_enum_descriptors_Config_2eproto, file_level_service_descriptors_Config_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Config_2eproto(&descriptor_table_Config_2eproto);

// ===================================================================

class Config::_Internal {
 public:
  static const ::ConnectInfo& coninfo(const Config* msg);
  static const ::SystemInfo& sysinfo(const Config* msg);
  static const ::SimulationInfo& siminfo(const Config* msg);
};

const ::ConnectInfo&
Config::_Internal::coninfo(const Config* msg) {
  return *msg->coninfo_;
}
const ::SystemInfo&
Config::_Internal::sysinfo(const Config* msg) {
  return *msg->sysinfo_;
}
const ::SimulationInfo&
Config::_Internal::siminfo(const Config* msg) {
  return *msg->siminfo_;
}
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coninfo()) {
    coninfo_ = new ::ConnectInfo(*from.coninfo_);
  } else {
    coninfo_ = nullptr;
  }
  if (from._internal_has_sysinfo()) {
    sysinfo_ = new ::SystemInfo(*from.sysinfo_);
  } else {
    sysinfo_ = nullptr;
  }
  if (from._internal_has_siminfo()) {
    siminfo_ = new ::SimulationInfo(*from.siminfo_);
  } else {
    siminfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Config)
}

void Config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_Config_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&coninfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&siminfo_) -
      reinterpret_cast<char*>(&coninfo_)) + sizeof(siminfo_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete coninfo_;
  if (this != internal_default_instance()) delete sysinfo_;
  if (this != internal_default_instance()) delete siminfo_;
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_Config_2eproto.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && coninfo_ != nullptr) {
    delete coninfo_;
  }
  coninfo_ = nullptr;
  if (GetArena() == nullptr && sysinfo_ != nullptr) {
    delete sysinfo_;
  }
  sysinfo_ = nullptr;
  if (GetArena() == nullptr && siminfo_ != nullptr) {
    delete siminfo_;
  }
  siminfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConnectInfo conInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coninfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SystemInfo sysInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sysinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SimulationInfo simInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_siminfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConnectInfo conInfo = 1;
  if (this->has_coninfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coninfo(this), target, stream);
  }

  // .SystemInfo sysInfo = 2;
  if (this->has_sysinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sysinfo(this), target, stream);
  }

  // .SimulationInfo simInfo = 3;
  if (this->has_siminfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::siminfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConnectInfo conInfo = 1;
  if (this->has_coninfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coninfo_);
  }

  // .SystemInfo sysInfo = 2;
  if (this->has_sysinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sysinfo_);
  }

  // .SimulationInfo simInfo = 3;
  if (this->has_siminfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *siminfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_coninfo()) {
    _internal_mutable_coninfo()->::ConnectInfo::MergeFrom(from._internal_coninfo());
  }
  if (from.has_sysinfo()) {
    _internal_mutable_sysinfo()->::SystemInfo::MergeFrom(from._internal_sysinfo());
  }
  if (from.has_siminfo()) {
    _internal_mutable_siminfo()->::SimulationInfo::MergeFrom(from._internal_siminfo());
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, siminfo_)
      + sizeof(Config::siminfo_)
      - PROTOBUF_FIELD_OFFSET(Config, coninfo_)>(
          reinterpret_cast<char*>(&coninfo_),
          reinterpret_cast<char*>(&other->coninfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConnectInfo::_Internal {
 public:
};

ConnectInfo::ConnectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ConnectInfo)
}
ConnectInfo::ConnectInfo(const ConnectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sip().empty()) {
    sip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sip(), 
      GetArena());
  }
  scomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scomname().empty()) {
    scomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scomname(), 
      GetArena());
  }
  ::memcpy(&sport_, &from.sport_,
    static_cast<size_t>(reinterpret_cast<char*>(&contype_) -
    reinterpret_cast<char*>(&sport_)) + sizeof(contype_));
  // @@protoc_insertion_point(copy_constructor:ConnectInfo)
}

void ConnectInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectInfo_Config_2eproto.base);
  sip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sport_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&contype_) -
      reinterpret_cast<char*>(&sport_)) + sizeof(contype_));
}

ConnectInfo::~ConnectInfo() {
  // @@protoc_insertion_point(destructor:ConnectInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectInfo::ArenaDtor(void* object) {
  ConnectInfo* _this = reinterpret_cast< ConnectInfo* >(object);
  (void)_this;
}
void ConnectInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectInfo& ConnectInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectInfo_Config_2eproto.base);
  return *internal_default_instance();
}


void ConnectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sip_.ClearToEmpty();
  scomname_.ClearToEmpty();
  ::memset(&sport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contype_) -
      reinterpret_cast<char*>(&sport_)) + sizeof(contype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sIP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConnectInfo.sIP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sComName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_scomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConnectInfo.sComName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CONN_TYPE conType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_contype(static_cast<::CONN_TYPE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sIP = 1;
  if (this->sip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sip().data(), static_cast<int>(this->_internal_sip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConnectInfo.sIP");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sip(), target);
  }

  // uint32 sPort = 2;
  if (this->sport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sport(), target);
  }

  // string sComName = 3;
  if (this->scomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scomname().data(), static_cast<int>(this->_internal_scomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConnectInfo.sComName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_scomname(), target);
  }

  // .CONN_TYPE conType = 4;
  if (this->contype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_contype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectInfo)
  return target;
}

size_t ConnectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sIP = 1;
  if (this->sip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sip());
  }

  // string sComName = 3;
  if (this->scomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scomname());
  }

  // uint32 sPort = 2;
  if (this->sport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sport());
  }

  // .CONN_TYPE conType = 4;
  if (this->contype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConnectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConnectInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConnectInfo)
    MergeFrom(*source);
  }
}

void ConnectInfo::MergeFrom(const ConnectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sip().size() > 0) {
    _internal_set_sip(from._internal_sip());
  }
  if (from.scomname().size() > 0) {
    _internal_set_scomname(from._internal_scomname());
  }
  if (from.sport() != 0) {
    _internal_set_sport(from._internal_sport());
  }
  if (from.contype() != 0) {
    _internal_set_contype(from._internal_contype());
  }
}

void ConnectInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectInfo::CopyFrom(const ConnectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectInfo::IsInitialized() const {
  return true;
}

void ConnectInfo::InternalSwap(ConnectInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sip_.Swap(&other->sip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scomname_.Swap(&other->scomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectInfo, contype_)
      + sizeof(ConnectInfo::contype_)
      - PROTOBUF_FIELD_OFFSET(ConnectInfo, sport_)>(
          reinterpret_cast<char*>(&sport_),
          reinterpret_cast<char*>(&other->sport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SystemInfo::_Internal {
 public:
};

SystemInfo::SystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SystemInfo)
}
SystemInfo::SystemInfo(const SystemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ndelehitline_, &from.ndelehitline_,
    static_cast<size_t>(reinterpret_cast<char*>(&nopenspeak_) -
    reinterpret_cast<char*>(&ndelehitline_)) + sizeof(nopenspeak_));
  // @@protoc_insertion_point(copy_constructor:SystemInfo)
}

void SystemInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ndelehitline_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nopenspeak_) -
      reinterpret_cast<char*>(&ndelehitline_)) + sizeof(nopenspeak_));
}

SystemInfo::~SystemInfo() {
  // @@protoc_insertion_point(destructor:SystemInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SystemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SystemInfo::ArenaDtor(void* object) {
  SystemInfo* _this = reinterpret_cast< SystemInfo* >(object);
  (void)_this;
}
void SystemInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemInfo& SystemInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemInfo_Config_2eproto.base);
  return *internal_default_instance();
}


void SystemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SystemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ndelehitline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nopenspeak_) -
      reinterpret_cast<char*>(&ndelehitline_)) + sizeof(nopenspeak_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 nDeleHitLine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ndelehitline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bOpenBroad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bopenbroad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bOpenBoard = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bopenboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bOpenSound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bopensound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bOpenSWind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bopenswind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nOpenSpeak = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          nopenspeak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SystemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nDeleHitLine = 1;
  if (this->ndelehitline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ndelehitline(), target);
  }

  // bool bOpenBroad = 2;
  if (this->bopenbroad() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bopenbroad(), target);
  }

  // bool bOpenBoard = 3;
  if (this->bopenboard() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bopenboard(), target);
  }

  // bool bOpenSound = 4;
  if (this->bopensound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bopensound(), target);
  }

  // bool bOpenSWind = 5;
  if (this->bopenswind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bopenswind(), target);
  }

  // int32 nOpenSpeak = 6;
  if (this->nopenspeak() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_nopenspeak(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SystemInfo)
  return target;
}

size_t SystemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SystemInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 nDeleHitLine = 1;
  if (this->ndelehitline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ndelehitline());
  }

  // bool bOpenBroad = 2;
  if (this->bopenbroad() != 0) {
    total_size += 1 + 1;
  }

  // bool bOpenBoard = 3;
  if (this->bopenboard() != 0) {
    total_size += 1 + 1;
  }

  // bool bOpenSound = 4;
  if (this->bopensound() != 0) {
    total_size += 1 + 1;
  }

  // bool bOpenSWind = 5;
  if (this->bopenswind() != 0) {
    total_size += 1 + 1;
  }

  // int32 nOpenSpeak = 6;
  if (this->nopenspeak() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nopenspeak());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SystemInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SystemInfo)
    MergeFrom(*source);
  }
}

void SystemInfo::MergeFrom(const SystemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ndelehitline() != 0) {
    _internal_set_ndelehitline(from._internal_ndelehitline());
  }
  if (from.bopenbroad() != 0) {
    _internal_set_bopenbroad(from._internal_bopenbroad());
  }
  if (from.bopenboard() != 0) {
    _internal_set_bopenboard(from._internal_bopenboard());
  }
  if (from.bopensound() != 0) {
    _internal_set_bopensound(from._internal_bopensound());
  }
  if (from.bopenswind() != 0) {
    _internal_set_bopenswind(from._internal_bopenswind());
  }
  if (from.nopenspeak() != 0) {
    _internal_set_nopenspeak(from._internal_nopenspeak());
  }
}

void SystemInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemInfo::CopyFrom(const SystemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfo::IsInitialized() const {
  return true;
}

void SystemInfo::InternalSwap(SystemInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemInfo, nopenspeak_)
      + sizeof(SystemInfo::nopenspeak_)
      - PROTOBUF_FIELD_OFFSET(SystemInfo, ndelehitline_)>(
          reinterpret_cast<char*>(&ndelehitline_),
          reinterpret_cast<char*>(&other->ndelehitline_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HitScore::_Internal {
 public:
};

HitScore::HitScore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HitScore)
}
HitScore::HitScore(const HitScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hitpart_, &from.hitpart_,
    static_cast<size_t>(reinterpret_cast<char*>(&nscore_) -
    reinterpret_cast<char*>(&hitpart_)) + sizeof(nscore_));
  // @@protoc_insertion_point(copy_constructor:HitScore)
}

void HitScore::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hitpart_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nscore_) -
      reinterpret_cast<char*>(&hitpart_)) + sizeof(nscore_));
}

HitScore::~HitScore() {
  // @@protoc_insertion_point(destructor:HitScore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HitScore::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HitScore::ArenaDtor(void* object) {
  HitScore* _this = reinterpret_cast< HitScore* >(object);
  (void)_this;
}
void HitScore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HitScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HitScore& HitScore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HitScore_Config_2eproto.base);
  return *internal_default_instance();
}


void HitScore::Clear() {
// @@protoc_insertion_point(message_clear_start:HitScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hitpart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nscore_) -
      reinterpret_cast<char*>(&hitpart_)) + sizeof(nscore_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PERSON_PART hitPart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hitpart(static_cast<::PERSON_PART>(val));
        } else goto handle_unusual;
        continue;
      // int32 nScore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HitScore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HitScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PERSON_PART hitPart = 1;
  if (this->hitpart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_hitpart(), target);
  }

  // int32 nScore = 2;
  if (this->nscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nscore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HitScore)
  return target;
}

size_t HitScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HitScore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PERSON_PART hitPart = 1;
  if (this->hitpart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hitpart());
  }

  // int32 nScore = 2;
  if (this->nscore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nscore());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HitScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HitScore)
  GOOGLE_DCHECK_NE(&from, this);
  const HitScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HitScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HitScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HitScore)
    MergeFrom(*source);
  }
}

void HitScore::MergeFrom(const HitScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HitScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hitpart() != 0) {
    _internal_set_hitpart(from._internal_hitpart());
  }
  if (from.nscore() != 0) {
    _internal_set_nscore(from._internal_nscore());
  }
}

void HitScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HitScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitScore::CopyFrom(const HitScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HitScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitScore::IsInitialized() const {
  return true;
}

void HitScore::InternalSwap(HitScore* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HitScore, nscore_)
      + sizeof(HitScore::nscore_)
      - PROTOBUF_FIELD_OFFSET(HitScore, hitpart_)>(
          reinterpret_cast<char*>(&hitpart_),
          reinterpret_cast<char*>(&other->hitpart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HitScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HitRate::_Internal {
 public:
};

HitRate::HitRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HitRate)
}
HitRate::HitRate(const HitRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hitpart_, &from.hitpart_,
    static_cast<size_t>(reinterpret_cast<char*>(&nrate_) -
    reinterpret_cast<char*>(&hitpart_)) + sizeof(nrate_));
  // @@protoc_insertion_point(copy_constructor:HitRate)
}

void HitRate::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hitpart_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nrate_) -
      reinterpret_cast<char*>(&hitpart_)) + sizeof(nrate_));
}

HitRate::~HitRate() {
  // @@protoc_insertion_point(destructor:HitRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HitRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HitRate::ArenaDtor(void* object) {
  HitRate* _this = reinterpret_cast< HitRate* >(object);
  (void)_this;
}
void HitRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HitRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HitRate& HitRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HitRate_Config_2eproto.base);
  return *internal_default_instance();
}


void HitRate::Clear() {
// @@protoc_insertion_point(message_clear_start:HitRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hitpart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nrate_) -
      reinterpret_cast<char*>(&hitpart_)) + sizeof(nrate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PERSON_PART hitPart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hitpart(static_cast<::PERSON_PART>(val));
        } else goto handle_unusual;
        continue;
      // int32 nRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HitRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HitRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PERSON_PART hitPart = 1;
  if (this->hitpart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_hitpart(), target);
  }

  // int32 nRate = 2;
  if (this->nrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HitRate)
  return target;
}

size_t HitRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HitRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PERSON_PART hitPart = 1;
  if (this->hitpart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hitpart());
  }

  // int32 nRate = 2;
  if (this->nrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nrate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HitRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HitRate)
  GOOGLE_DCHECK_NE(&from, this);
  const HitRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HitRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HitRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HitRate)
    MergeFrom(*source);
  }
}

void HitRate::MergeFrom(const HitRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HitRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hitpart() != 0) {
    _internal_set_hitpart(from._internal_hitpart());
  }
  if (from.nrate() != 0) {
    _internal_set_nrate(from._internal_nrate());
  }
}

void HitRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HitRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitRate::CopyFrom(const HitRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HitRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitRate::IsInitialized() const {
  return true;
}

void HitRate::InternalSwap(HitRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HitRate, nrate_)
      + sizeof(HitRate::nrate_)
      - PROTOBUF_FIELD_OFFSET(HitRate, hitpart_)>(
          reinterpret_cast<char*>(&hitpart_),
          reinterpret_cast<char*>(&other->hitpart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HitRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimulationInfo::_Internal {
 public:
};

SimulationInfo::SimulationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scoreset_(arena),
  rateset_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SimulationInfo)
}
SimulationInfo::SimulationInfo(const SimulationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scoreset_(from.scoreset_),
      rateset_(from.rateset_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nsycntime_, &from.nsycntime_,
    static_cast<size_t>(reinterpret_cast<char*>(&bdeakill_) -
    reinterpret_cast<char*>(&nsycntime_)) + sizeof(bdeakill_));
  // @@protoc_insertion_point(copy_constructor:SimulationInfo)
}

void SimulationInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulationInfo_Config_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nsycntime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bdeakill_) -
      reinterpret_cast<char*>(&nsycntime_)) + sizeof(bdeakill_));
}

SimulationInfo::~SimulationInfo() {
  // @@protoc_insertion_point(destructor:SimulationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimulationInfo::ArenaDtor(void* object) {
  SimulationInfo* _this = reinterpret_cast< SimulationInfo* >(object);
  (void)_this;
}
void SimulationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulationInfo& SimulationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulationInfo_Config_2eproto.base);
  return *internal_default_instance();
}


void SimulationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SimulationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scoreset_.Clear();
  rateset_.Clear();
  ::memset(&nsycntime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bdeakill_) -
      reinterpret_cast<char*>(&nsycntime_)) + sizeof(bdeakill_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 nSycnTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nsycntime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nTime2Drop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ntime2drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nInitbullets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ninitbullets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bKillSelf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bkillself_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bDeaKill = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bdeakill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .HitScore scoreSet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scoreset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HitRate rateSet = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rateset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimulationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nSycnTime = 1;
  if (this->nsycntime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nsycntime(), target);
  }

  // int32 nTime2Drop = 2;
  if (this->ntime2drop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ntime2drop(), target);
  }

  // int32 nInitbullets = 3;
  if (this->ninitbullets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ninitbullets(), target);
  }

  // bool bKillSelf = 4;
  if (this->bkillself() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bkillself(), target);
  }

  // bool bDeaKill = 5;
  if (this->bdeakill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bdeakill(), target);
  }

  // repeated .HitScore scoreSet = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scoreset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_scoreset(i), target, stream);
  }

  // repeated .HitRate rateSet = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rateset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_rateset(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimulationInfo)
  return target;
}

size_t SimulationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimulationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HitScore scoreSet = 6;
  total_size += 1UL * this->_internal_scoreset_size();
  for (const auto& msg : this->scoreset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HitRate rateSet = 7;
  total_size += 1UL * this->_internal_rateset_size();
  for (const auto& msg : this->rateset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 nSycnTime = 1;
  if (this->nsycntime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nsycntime());
  }

  // int32 nTime2Drop = 2;
  if (this->ntime2drop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ntime2drop());
  }

  // int32 nInitbullets = 3;
  if (this->ninitbullets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ninitbullets());
  }

  // bool bKillSelf = 4;
  if (this->bkillself() != 0) {
    total_size += 1 + 1;
  }

  // bool bDeaKill = 5;
  if (this->bdeakill() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SimulationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SimulationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SimulationInfo)
    MergeFrom(*source);
  }
}

void SimulationInfo::MergeFrom(const SimulationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SimulationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scoreset_.MergeFrom(from.scoreset_);
  rateset_.MergeFrom(from.rateset_);
  if (from.nsycntime() != 0) {
    _internal_set_nsycntime(from._internal_nsycntime());
  }
  if (from.ntime2drop() != 0) {
    _internal_set_ntime2drop(from._internal_ntime2drop());
  }
  if (from.ninitbullets() != 0) {
    _internal_set_ninitbullets(from._internal_ninitbullets());
  }
  if (from.bkillself() != 0) {
    _internal_set_bkillself(from._internal_bkillself());
  }
  if (from.bdeakill() != 0) {
    _internal_set_bdeakill(from._internal_bdeakill());
  }
}

void SimulationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SimulationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationInfo::CopyFrom(const SimulationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimulationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationInfo::IsInitialized() const {
  return true;
}

void SimulationInfo::InternalSwap(SimulationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scoreset_.InternalSwap(&other->scoreset_);
  rateset_.InternalSwap(&other->rateset_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationInfo, bdeakill_)
      + sizeof(SimulationInfo::bdeakill_)
      - PROTOBUF_FIELD_OFFSET(SimulationInfo, nsycntime_)>(
          reinterpret_cast<char*>(&nsycntime_),
          reinterpret_cast<char*>(&other->nsycntime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Config* Arena::CreateMaybeMessage< ::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::ConnectInfo* Arena::CreateMaybeMessage< ::ConnectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConnectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SystemInfo* Arena::CreateMaybeMessage< ::SystemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SystemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::HitScore* Arena::CreateMaybeMessage< ::HitScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HitScore >(arena);
}
template<> PROTOBUF_NOINLINE ::HitRate* Arena::CreateMaybeMessage< ::HitRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HitRate >(arena);
}
template<> PROTOBUF_NOINLINE ::SimulationInfo* Arena::CreateMaybeMessage< ::SimulationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SimulationInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
