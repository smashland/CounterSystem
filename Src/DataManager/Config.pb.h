// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Config_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Config_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TypeDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Config_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Config_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Config_2eproto;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class ConnectInfo;
class ConnectInfoDefaultTypeInternal;
extern ConnectInfoDefaultTypeInternal _ConnectInfo_default_instance_;
class HitRate;
class HitRateDefaultTypeInternal;
extern HitRateDefaultTypeInternal _HitRate_default_instance_;
class HitScore;
class HitScoreDefaultTypeInternal;
extern HitScoreDefaultTypeInternal _HitScore_default_instance_;
class SimulationInfo;
class SimulationInfoDefaultTypeInternal;
extern SimulationInfoDefaultTypeInternal _SimulationInfo_default_instance_;
class SystemInfo;
class SystemInfoDefaultTypeInternal;
extern SystemInfoDefaultTypeInternal _SystemInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Config* Arena::CreateMaybeMessage<::Config>(Arena*);
template<> ::ConnectInfo* Arena::CreateMaybeMessage<::ConnectInfo>(Arena*);
template<> ::HitRate* Arena::CreateMaybeMessage<::HitRate>(Arena*);
template<> ::HitScore* Arena::CreateMaybeMessage<::HitScore>(Arena*);
template<> ::SimulationInfo* Arena::CreateMaybeMessage<::SimulationInfo>(Arena*);
template<> ::SystemInfo* Arena::CreateMaybeMessage<::SystemInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  virtual ~Config();

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance();

  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Config_2eproto);
    return ::descriptor_table_Config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConInfoFieldNumber = 1,
    kSysInfoFieldNumber = 2,
    kSimInfoFieldNumber = 3,
  };
  // .ConnectInfo conInfo = 1;
  bool has_coninfo() const;
  private:
  bool _internal_has_coninfo() const;
  public:
  void clear_coninfo();
  const ::ConnectInfo& coninfo() const;
  ::ConnectInfo* release_coninfo();
  ::ConnectInfo* mutable_coninfo();
  void set_allocated_coninfo(::ConnectInfo* coninfo);
  private:
  const ::ConnectInfo& _internal_coninfo() const;
  ::ConnectInfo* _internal_mutable_coninfo();
  public:
  void unsafe_arena_set_allocated_coninfo(
      ::ConnectInfo* coninfo);
  ::ConnectInfo* unsafe_arena_release_coninfo();

  // .SystemInfo sysInfo = 2;
  bool has_sysinfo() const;
  private:
  bool _internal_has_sysinfo() const;
  public:
  void clear_sysinfo();
  const ::SystemInfo& sysinfo() const;
  ::SystemInfo* release_sysinfo();
  ::SystemInfo* mutable_sysinfo();
  void set_allocated_sysinfo(::SystemInfo* sysinfo);
  private:
  const ::SystemInfo& _internal_sysinfo() const;
  ::SystemInfo* _internal_mutable_sysinfo();
  public:
  void unsafe_arena_set_allocated_sysinfo(
      ::SystemInfo* sysinfo);
  ::SystemInfo* unsafe_arena_release_sysinfo();

  // .SimulationInfo simInfo = 3;
  bool has_siminfo() const;
  private:
  bool _internal_has_siminfo() const;
  public:
  void clear_siminfo();
  const ::SimulationInfo& siminfo() const;
  ::SimulationInfo* release_siminfo();
  ::SimulationInfo* mutable_siminfo();
  void set_allocated_siminfo(::SimulationInfo* siminfo);
  private:
  const ::SimulationInfo& _internal_siminfo() const;
  ::SimulationInfo* _internal_mutable_siminfo();
  public:
  void unsafe_arena_set_allocated_siminfo(
      ::SimulationInfo* siminfo);
  ::SimulationInfo* unsafe_arena_release_siminfo();

  // @@protoc_insertion_point(class_scope:Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ConnectInfo* coninfo_;
  ::SystemInfo* sysinfo_;
  ::SimulationInfo* siminfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Config_2eproto;
};
// -------------------------------------------------------------------

class ConnectInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectInfo) */ {
 public:
  inline ConnectInfo() : ConnectInfo(nullptr) {}
  virtual ~ConnectInfo();

  ConnectInfo(const ConnectInfo& from);
  ConnectInfo(ConnectInfo&& from) noexcept
    : ConnectInfo() {
    *this = ::std::move(from);
  }

  inline ConnectInfo& operator=(const ConnectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectInfo& operator=(ConnectInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectInfo& default_instance();

  static inline const ConnectInfo* internal_default_instance() {
    return reinterpret_cast<const ConnectInfo*>(
               &_ConnectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectInfo& a, ConnectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectInfo* New() const final {
    return CreateMaybeMessage<ConnectInfo>(nullptr);
  }

  ConnectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectInfo& from);
  void MergeFrom(const ConnectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectInfo";
  }
  protected:
  explicit ConnectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Config_2eproto);
    return ::descriptor_table_Config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSIPFieldNumber = 1,
    kSComNameFieldNumber = 3,
    kSPortFieldNumber = 2,
    kConTypeFieldNumber = 4,
  };
  // string sIP = 1;
  void clear_sip();
  const std::string& sip() const;
  void set_sip(const std::string& value);
  void set_sip(std::string&& value);
  void set_sip(const char* value);
  void set_sip(const char* value, size_t size);
  std::string* mutable_sip();
  std::string* release_sip();
  void set_allocated_sip(std::string* sip);
  private:
  const std::string& _internal_sip() const;
  void _internal_set_sip(const std::string& value);
  std::string* _internal_mutable_sip();
  public:

  // string sComName = 3;
  void clear_scomname();
  const std::string& scomname() const;
  void set_scomname(const std::string& value);
  void set_scomname(std::string&& value);
  void set_scomname(const char* value);
  void set_scomname(const char* value, size_t size);
  std::string* mutable_scomname();
  std::string* release_scomname();
  void set_allocated_scomname(std::string* scomname);
  private:
  const std::string& _internal_scomname() const;
  void _internal_set_scomname(const std::string& value);
  std::string* _internal_mutable_scomname();
  public:

  // uint32 sPort = 2;
  void clear_sport();
  ::PROTOBUF_NAMESPACE_ID::uint32 sport() const;
  void set_sport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sport() const;
  void _internal_set_sport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .CONN_TYPE conType = 4;
  void clear_contype();
  ::CONN_TYPE contype() const;
  void set_contype(::CONN_TYPE value);
  private:
  ::CONN_TYPE _internal_contype() const;
  void _internal_set_contype(::CONN_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:ConnectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scomname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sport_;
  int contype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Config_2eproto;
};
// -------------------------------------------------------------------

class SystemInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SystemInfo) */ {
 public:
  inline SystemInfo() : SystemInfo(nullptr) {}
  virtual ~SystemInfo();

  SystemInfo(const SystemInfo& from);
  SystemInfo(SystemInfo&& from) noexcept
    : SystemInfo() {
    *this = ::std::move(from);
  }

  inline SystemInfo& operator=(const SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfo& operator=(SystemInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfo& default_instance();

  static inline const SystemInfo* internal_default_instance() {
    return reinterpret_cast<const SystemInfo*>(
               &_SystemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SystemInfo& a, SystemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfo* New() const final {
    return CreateMaybeMessage<SystemInfo>(nullptr);
  }

  SystemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfo& from);
  void MergeFrom(const SystemInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SystemInfo";
  }
  protected:
  explicit SystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Config_2eproto);
    return ::descriptor_table_Config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNDeleHitLineFieldNumber = 1,
    kBOpenBroadFieldNumber = 2,
    kBOpenBoardFieldNumber = 3,
    kBOpenSoundFieldNumber = 4,
    kBOpenSWindFieldNumber = 5,
    kNOpenSpeakFieldNumber = 6,
  };
  // int32 nDeleHitLine = 1;
  void clear_ndelehitline();
  ::PROTOBUF_NAMESPACE_ID::int32 ndelehitline() const;
  void set_ndelehitline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ndelehitline() const;
  void _internal_set_ndelehitline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bOpenBroad = 2;
  void clear_bopenbroad();
  bool bopenbroad() const;
  void set_bopenbroad(bool value);
  private:
  bool _internal_bopenbroad() const;
  void _internal_set_bopenbroad(bool value);
  public:

  // bool bOpenBoard = 3;
  void clear_bopenboard();
  bool bopenboard() const;
  void set_bopenboard(bool value);
  private:
  bool _internal_bopenboard() const;
  void _internal_set_bopenboard(bool value);
  public:

  // bool bOpenSound = 4;
  void clear_bopensound();
  bool bopensound() const;
  void set_bopensound(bool value);
  private:
  bool _internal_bopensound() const;
  void _internal_set_bopensound(bool value);
  public:

  // bool bOpenSWind = 5;
  void clear_bopenswind();
  bool bopenswind() const;
  void set_bopenswind(bool value);
  private:
  bool _internal_bopenswind() const;
  void _internal_set_bopenswind(bool value);
  public:

  // int32 nOpenSpeak = 6;
  void clear_nopenspeak();
  ::PROTOBUF_NAMESPACE_ID::int32 nopenspeak() const;
  void set_nopenspeak(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nopenspeak() const;
  void _internal_set_nopenspeak(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SystemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ndelehitline_;
  bool bopenbroad_;
  bool bopenboard_;
  bool bopensound_;
  bool bopenswind_;
  ::PROTOBUF_NAMESPACE_ID::int32 nopenspeak_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Config_2eproto;
};
// -------------------------------------------------------------------

class HitScore PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HitScore) */ {
 public:
  inline HitScore() : HitScore(nullptr) {}
  virtual ~HitScore();

  HitScore(const HitScore& from);
  HitScore(HitScore&& from) noexcept
    : HitScore() {
    *this = ::std::move(from);
  }

  inline HitScore& operator=(const HitScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline HitScore& operator=(HitScore&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HitScore& default_instance();

  static inline const HitScore* internal_default_instance() {
    return reinterpret_cast<const HitScore*>(
               &_HitScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HitScore& a, HitScore& b) {
    a.Swap(&b);
  }
  inline void Swap(HitScore* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HitScore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HitScore* New() const final {
    return CreateMaybeMessage<HitScore>(nullptr);
  }

  HitScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HitScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HitScore& from);
  void MergeFrom(const HitScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HitScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HitScore";
  }
  protected:
  explicit HitScore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Config_2eproto);
    return ::descriptor_table_Config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitPartFieldNumber = 1,
    kNScoreFieldNumber = 2,
  };
  // .PERSON_PART hitPart = 1;
  void clear_hitpart();
  ::PERSON_PART hitpart() const;
  void set_hitpart(::PERSON_PART value);
  private:
  ::PERSON_PART _internal_hitpart() const;
  void _internal_set_hitpart(::PERSON_PART value);
  public:

  // int32 nScore = 2;
  void clear_nscore();
  ::PROTOBUF_NAMESPACE_ID::int32 nscore() const;
  void set_nscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nscore() const;
  void _internal_set_nscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:HitScore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int hitpart_;
  ::PROTOBUF_NAMESPACE_ID::int32 nscore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Config_2eproto;
};
// -------------------------------------------------------------------

class HitRate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HitRate) */ {
 public:
  inline HitRate() : HitRate(nullptr) {}
  virtual ~HitRate();

  HitRate(const HitRate& from);
  HitRate(HitRate&& from) noexcept
    : HitRate() {
    *this = ::std::move(from);
  }

  inline HitRate& operator=(const HitRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline HitRate& operator=(HitRate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HitRate& default_instance();

  static inline const HitRate* internal_default_instance() {
    return reinterpret_cast<const HitRate*>(
               &_HitRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HitRate& a, HitRate& b) {
    a.Swap(&b);
  }
  inline void Swap(HitRate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HitRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HitRate* New() const final {
    return CreateMaybeMessage<HitRate>(nullptr);
  }

  HitRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HitRate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HitRate& from);
  void MergeFrom(const HitRate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HitRate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HitRate";
  }
  protected:
  explicit HitRate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Config_2eproto);
    return ::descriptor_table_Config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitPartFieldNumber = 1,
    kNRateFieldNumber = 2,
  };
  // .PERSON_PART hitPart = 1;
  void clear_hitpart();
  ::PERSON_PART hitpart() const;
  void set_hitpart(::PERSON_PART value);
  private:
  ::PERSON_PART _internal_hitpart() const;
  void _internal_set_hitpart(::PERSON_PART value);
  public:

  // int32 nRate = 2;
  void clear_nrate();
  ::PROTOBUF_NAMESPACE_ID::int32 nrate() const;
  void set_nrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nrate() const;
  void _internal_set_nrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:HitRate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int hitpart_;
  ::PROTOBUF_NAMESPACE_ID::int32 nrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Config_2eproto;
};
// -------------------------------------------------------------------

class SimulationInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimulationInfo) */ {
 public:
  inline SimulationInfo() : SimulationInfo(nullptr) {}
  virtual ~SimulationInfo();

  SimulationInfo(const SimulationInfo& from);
  SimulationInfo(SimulationInfo&& from) noexcept
    : SimulationInfo() {
    *this = ::std::move(from);
  }

  inline SimulationInfo& operator=(const SimulationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationInfo& operator=(SimulationInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationInfo& default_instance();

  static inline const SimulationInfo* internal_default_instance() {
    return reinterpret_cast<const SimulationInfo*>(
               &_SimulationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SimulationInfo& a, SimulationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationInfo* New() const final {
    return CreateMaybeMessage<SimulationInfo>(nullptr);
  }

  SimulationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationInfo& from);
  void MergeFrom(const SimulationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimulationInfo";
  }
  protected:
  explicit SimulationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Config_2eproto);
    return ::descriptor_table_Config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreSetFieldNumber = 6,
    kRateSetFieldNumber = 7,
    kNSycnTimeFieldNumber = 1,
    kNTime2DropFieldNumber = 2,
    kNInitbulletsFieldNumber = 3,
    kBKillSelfFieldNumber = 4,
    kBDeaKillFieldNumber = 5,
  };
  // repeated .HitScore scoreSet = 6;
  int scoreset_size() const;
  private:
  int _internal_scoreset_size() const;
  public:
  void clear_scoreset();
  ::HitScore* mutable_scoreset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HitScore >*
      mutable_scoreset();
  private:
  const ::HitScore& _internal_scoreset(int index) const;
  ::HitScore* _internal_add_scoreset();
  public:
  const ::HitScore& scoreset(int index) const;
  ::HitScore* add_scoreset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HitScore >&
      scoreset() const;

  // repeated .HitRate rateSet = 7;
  int rateset_size() const;
  private:
  int _internal_rateset_size() const;
  public:
  void clear_rateset();
  ::HitRate* mutable_rateset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HitRate >*
      mutable_rateset();
  private:
  const ::HitRate& _internal_rateset(int index) const;
  ::HitRate* _internal_add_rateset();
  public:
  const ::HitRate& rateset(int index) const;
  ::HitRate* add_rateset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HitRate >&
      rateset() const;

  // int32 nSycnTime = 1;
  void clear_nsycntime();
  ::PROTOBUF_NAMESPACE_ID::int32 nsycntime() const;
  void set_nsycntime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nsycntime() const;
  void _internal_set_nsycntime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nTime2Drop = 2;
  void clear_ntime2drop();
  ::PROTOBUF_NAMESPACE_ID::int32 ntime2drop() const;
  void set_ntime2drop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ntime2drop() const;
  void _internal_set_ntime2drop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nInitbullets = 3;
  void clear_ninitbullets();
  ::PROTOBUF_NAMESPACE_ID::int32 ninitbullets() const;
  void set_ninitbullets(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ninitbullets() const;
  void _internal_set_ninitbullets(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bKillSelf = 4;
  void clear_bkillself();
  bool bkillself() const;
  void set_bkillself(bool value);
  private:
  bool _internal_bkillself() const;
  void _internal_set_bkillself(bool value);
  public:

  // bool bDeaKill = 5;
  void clear_bdeakill();
  bool bdeakill() const;
  void set_bdeakill(bool value);
  private:
  bool _internal_bdeakill() const;
  void _internal_set_bdeakill(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SimulationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HitScore > scoreset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HitRate > rateset_;
  ::PROTOBUF_NAMESPACE_ID::int32 nsycntime_;
  ::PROTOBUF_NAMESPACE_ID::int32 ntime2drop_;
  ::PROTOBUF_NAMESPACE_ID::int32 ninitbullets_;
  bool bkillself_;
  bool bdeakill_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Config_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// .ConnectInfo conInfo = 1;
inline bool Config::_internal_has_coninfo() const {
  return this != internal_default_instance() && coninfo_ != nullptr;
}
inline bool Config::has_coninfo() const {
  return _internal_has_coninfo();
}
inline void Config::clear_coninfo() {
  if (GetArena() == nullptr && coninfo_ != nullptr) {
    delete coninfo_;
  }
  coninfo_ = nullptr;
}
inline const ::ConnectInfo& Config::_internal_coninfo() const {
  const ::ConnectInfo* p = coninfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ConnectInfo&>(
      ::_ConnectInfo_default_instance_);
}
inline const ::ConnectInfo& Config::coninfo() const {
  // @@protoc_insertion_point(field_get:Config.conInfo)
  return _internal_coninfo();
}
inline void Config::unsafe_arena_set_allocated_coninfo(
    ::ConnectInfo* coninfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coninfo_);
  }
  coninfo_ = coninfo;
  if (coninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.conInfo)
}
inline ::ConnectInfo* Config::release_coninfo() {
  
  ::ConnectInfo* temp = coninfo_;
  coninfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ConnectInfo* Config::unsafe_arena_release_coninfo() {
  // @@protoc_insertion_point(field_release:Config.conInfo)
  
  ::ConnectInfo* temp = coninfo_;
  coninfo_ = nullptr;
  return temp;
}
inline ::ConnectInfo* Config::_internal_mutable_coninfo() {
  
  if (coninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConnectInfo>(GetArena());
    coninfo_ = p;
  }
  return coninfo_;
}
inline ::ConnectInfo* Config::mutable_coninfo() {
  // @@protoc_insertion_point(field_mutable:Config.conInfo)
  return _internal_mutable_coninfo();
}
inline void Config::set_allocated_coninfo(::ConnectInfo* coninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coninfo_;
  }
  if (coninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coninfo);
    if (message_arena != submessage_arena) {
      coninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coninfo, submessage_arena);
    }
    
  } else {
    
  }
  coninfo_ = coninfo;
  // @@protoc_insertion_point(field_set_allocated:Config.conInfo)
}

// .SystemInfo sysInfo = 2;
inline bool Config::_internal_has_sysinfo() const {
  return this != internal_default_instance() && sysinfo_ != nullptr;
}
inline bool Config::has_sysinfo() const {
  return _internal_has_sysinfo();
}
inline void Config::clear_sysinfo() {
  if (GetArena() == nullptr && sysinfo_ != nullptr) {
    delete sysinfo_;
  }
  sysinfo_ = nullptr;
}
inline const ::SystemInfo& Config::_internal_sysinfo() const {
  const ::SystemInfo* p = sysinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::SystemInfo&>(
      ::_SystemInfo_default_instance_);
}
inline const ::SystemInfo& Config::sysinfo() const {
  // @@protoc_insertion_point(field_get:Config.sysInfo)
  return _internal_sysinfo();
}
inline void Config::unsafe_arena_set_allocated_sysinfo(
    ::SystemInfo* sysinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sysinfo_);
  }
  sysinfo_ = sysinfo;
  if (sysinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.sysInfo)
}
inline ::SystemInfo* Config::release_sysinfo() {
  
  ::SystemInfo* temp = sysinfo_;
  sysinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SystemInfo* Config::unsafe_arena_release_sysinfo() {
  // @@protoc_insertion_point(field_release:Config.sysInfo)
  
  ::SystemInfo* temp = sysinfo_;
  sysinfo_ = nullptr;
  return temp;
}
inline ::SystemInfo* Config::_internal_mutable_sysinfo() {
  
  if (sysinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::SystemInfo>(GetArena());
    sysinfo_ = p;
  }
  return sysinfo_;
}
inline ::SystemInfo* Config::mutable_sysinfo() {
  // @@protoc_insertion_point(field_mutable:Config.sysInfo)
  return _internal_mutable_sysinfo();
}
inline void Config::set_allocated_sysinfo(::SystemInfo* sysinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sysinfo_;
  }
  if (sysinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sysinfo);
    if (message_arena != submessage_arena) {
      sysinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sysinfo, submessage_arena);
    }
    
  } else {
    
  }
  sysinfo_ = sysinfo;
  // @@protoc_insertion_point(field_set_allocated:Config.sysInfo)
}

// .SimulationInfo simInfo = 3;
inline bool Config::_internal_has_siminfo() const {
  return this != internal_default_instance() && siminfo_ != nullptr;
}
inline bool Config::has_siminfo() const {
  return _internal_has_siminfo();
}
inline void Config::clear_siminfo() {
  if (GetArena() == nullptr && siminfo_ != nullptr) {
    delete siminfo_;
  }
  siminfo_ = nullptr;
}
inline const ::SimulationInfo& Config::_internal_siminfo() const {
  const ::SimulationInfo* p = siminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::SimulationInfo&>(
      ::_SimulationInfo_default_instance_);
}
inline const ::SimulationInfo& Config::siminfo() const {
  // @@protoc_insertion_point(field_get:Config.simInfo)
  return _internal_siminfo();
}
inline void Config::unsafe_arena_set_allocated_siminfo(
    ::SimulationInfo* siminfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(siminfo_);
  }
  siminfo_ = siminfo;
  if (siminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.simInfo)
}
inline ::SimulationInfo* Config::release_siminfo() {
  
  ::SimulationInfo* temp = siminfo_;
  siminfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SimulationInfo* Config::unsafe_arena_release_siminfo() {
  // @@protoc_insertion_point(field_release:Config.simInfo)
  
  ::SimulationInfo* temp = siminfo_;
  siminfo_ = nullptr;
  return temp;
}
inline ::SimulationInfo* Config::_internal_mutable_siminfo() {
  
  if (siminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::SimulationInfo>(GetArena());
    siminfo_ = p;
  }
  return siminfo_;
}
inline ::SimulationInfo* Config::mutable_siminfo() {
  // @@protoc_insertion_point(field_mutable:Config.simInfo)
  return _internal_mutable_siminfo();
}
inline void Config::set_allocated_siminfo(::SimulationInfo* siminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete siminfo_;
  }
  if (siminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(siminfo);
    if (message_arena != submessage_arena) {
      siminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, siminfo, submessage_arena);
    }
    
  } else {
    
  }
  siminfo_ = siminfo;
  // @@protoc_insertion_point(field_set_allocated:Config.simInfo)
}

// -------------------------------------------------------------------

// ConnectInfo

// string sIP = 1;
inline void ConnectInfo::clear_sip() {
  sip_.ClearToEmpty();
}
inline const std::string& ConnectInfo::sip() const {
  // @@protoc_insertion_point(field_get:ConnectInfo.sIP)
  return _internal_sip();
}
inline void ConnectInfo::set_sip(const std::string& value) {
  _internal_set_sip(value);
  // @@protoc_insertion_point(field_set:ConnectInfo.sIP)
}
inline std::string* ConnectInfo::mutable_sip() {
  // @@protoc_insertion_point(field_mutable:ConnectInfo.sIP)
  return _internal_mutable_sip();
}
inline const std::string& ConnectInfo::_internal_sip() const {
  return sip_.Get();
}
inline void ConnectInfo::_internal_set_sip(const std::string& value) {
  
  sip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConnectInfo::set_sip(std::string&& value) {
  
  sip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConnectInfo.sIP)
}
inline void ConnectInfo::set_sip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ConnectInfo.sIP)
}
inline void ConnectInfo::set_sip(const char* value,
    size_t size) {
  
  sip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConnectInfo.sIP)
}
inline std::string* ConnectInfo::_internal_mutable_sip() {
  
  return sip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConnectInfo::release_sip() {
  // @@protoc_insertion_point(field_release:ConnectInfo.sIP)
  return sip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectInfo::set_allocated_sip(std::string* sip) {
  if (sip != nullptr) {
    
  } else {
    
  }
  sip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConnectInfo.sIP)
}

// uint32 sPort = 2;
inline void ConnectInfo::clear_sport() {
  sport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectInfo::_internal_sport() const {
  return sport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectInfo::sport() const {
  // @@protoc_insertion_point(field_get:ConnectInfo.sPort)
  return _internal_sport();
}
inline void ConnectInfo::_internal_set_sport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sport_ = value;
}
inline void ConnectInfo::set_sport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sport(value);
  // @@protoc_insertion_point(field_set:ConnectInfo.sPort)
}

// string sComName = 3;
inline void ConnectInfo::clear_scomname() {
  scomname_.ClearToEmpty();
}
inline const std::string& ConnectInfo::scomname() const {
  // @@protoc_insertion_point(field_get:ConnectInfo.sComName)
  return _internal_scomname();
}
inline void ConnectInfo::set_scomname(const std::string& value) {
  _internal_set_scomname(value);
  // @@protoc_insertion_point(field_set:ConnectInfo.sComName)
}
inline std::string* ConnectInfo::mutable_scomname() {
  // @@protoc_insertion_point(field_mutable:ConnectInfo.sComName)
  return _internal_mutable_scomname();
}
inline const std::string& ConnectInfo::_internal_scomname() const {
  return scomname_.Get();
}
inline void ConnectInfo::_internal_set_scomname(const std::string& value) {
  
  scomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConnectInfo::set_scomname(std::string&& value) {
  
  scomname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConnectInfo.sComName)
}
inline void ConnectInfo::set_scomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ConnectInfo.sComName)
}
inline void ConnectInfo::set_scomname(const char* value,
    size_t size) {
  
  scomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConnectInfo.sComName)
}
inline std::string* ConnectInfo::_internal_mutable_scomname() {
  
  return scomname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConnectInfo::release_scomname() {
  // @@protoc_insertion_point(field_release:ConnectInfo.sComName)
  return scomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectInfo::set_allocated_scomname(std::string* scomname) {
  if (scomname != nullptr) {
    
  } else {
    
  }
  scomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scomname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConnectInfo.sComName)
}

// .CONN_TYPE conType = 4;
inline void ConnectInfo::clear_contype() {
  contype_ = 0;
}
inline ::CONN_TYPE ConnectInfo::_internal_contype() const {
  return static_cast< ::CONN_TYPE >(contype_);
}
inline ::CONN_TYPE ConnectInfo::contype() const {
  // @@protoc_insertion_point(field_get:ConnectInfo.conType)
  return _internal_contype();
}
inline void ConnectInfo::_internal_set_contype(::CONN_TYPE value) {
  
  contype_ = value;
}
inline void ConnectInfo::set_contype(::CONN_TYPE value) {
  _internal_set_contype(value);
  // @@protoc_insertion_point(field_set:ConnectInfo.conType)
}

// -------------------------------------------------------------------

// SystemInfo

// int32 nDeleHitLine = 1;
inline void SystemInfo::clear_ndelehitline() {
  ndelehitline_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemInfo::_internal_ndelehitline() const {
  return ndelehitline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemInfo::ndelehitline() const {
  // @@protoc_insertion_point(field_get:SystemInfo.nDeleHitLine)
  return _internal_ndelehitline();
}
inline void SystemInfo::_internal_set_ndelehitline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ndelehitline_ = value;
}
inline void SystemInfo::set_ndelehitline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ndelehitline(value);
  // @@protoc_insertion_point(field_set:SystemInfo.nDeleHitLine)
}

// bool bOpenBroad = 2;
inline void SystemInfo::clear_bopenbroad() {
  bopenbroad_ = false;
}
inline bool SystemInfo::_internal_bopenbroad() const {
  return bopenbroad_;
}
inline bool SystemInfo::bopenbroad() const {
  // @@protoc_insertion_point(field_get:SystemInfo.bOpenBroad)
  return _internal_bopenbroad();
}
inline void SystemInfo::_internal_set_bopenbroad(bool value) {
  
  bopenbroad_ = value;
}
inline void SystemInfo::set_bopenbroad(bool value) {
  _internal_set_bopenbroad(value);
  // @@protoc_insertion_point(field_set:SystemInfo.bOpenBroad)
}

// bool bOpenBoard = 3;
inline void SystemInfo::clear_bopenboard() {
  bopenboard_ = false;
}
inline bool SystemInfo::_internal_bopenboard() const {
  return bopenboard_;
}
inline bool SystemInfo::bopenboard() const {
  // @@protoc_insertion_point(field_get:SystemInfo.bOpenBoard)
  return _internal_bopenboard();
}
inline void SystemInfo::_internal_set_bopenboard(bool value) {
  
  bopenboard_ = value;
}
inline void SystemInfo::set_bopenboard(bool value) {
  _internal_set_bopenboard(value);
  // @@protoc_insertion_point(field_set:SystemInfo.bOpenBoard)
}

// bool bOpenSound = 4;
inline void SystemInfo::clear_bopensound() {
  bopensound_ = false;
}
inline bool SystemInfo::_internal_bopensound() const {
  return bopensound_;
}
inline bool SystemInfo::bopensound() const {
  // @@protoc_insertion_point(field_get:SystemInfo.bOpenSound)
  return _internal_bopensound();
}
inline void SystemInfo::_internal_set_bopensound(bool value) {
  
  bopensound_ = value;
}
inline void SystemInfo::set_bopensound(bool value) {
  _internal_set_bopensound(value);
  // @@protoc_insertion_point(field_set:SystemInfo.bOpenSound)
}

// bool bOpenSWind = 5;
inline void SystemInfo::clear_bopenswind() {
  bopenswind_ = false;
}
inline bool SystemInfo::_internal_bopenswind() const {
  return bopenswind_;
}
inline bool SystemInfo::bopenswind() const {
  // @@protoc_insertion_point(field_get:SystemInfo.bOpenSWind)
  return _internal_bopenswind();
}
inline void SystemInfo::_internal_set_bopenswind(bool value) {
  
  bopenswind_ = value;
}
inline void SystemInfo::set_bopenswind(bool value) {
  _internal_set_bopenswind(value);
  // @@protoc_insertion_point(field_set:SystemInfo.bOpenSWind)
}

// int32 nOpenSpeak = 6;
inline void SystemInfo::clear_nopenspeak() {
  nopenspeak_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemInfo::_internal_nopenspeak() const {
  return nopenspeak_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemInfo::nopenspeak() const {
  // @@protoc_insertion_point(field_get:SystemInfo.nOpenSpeak)
  return _internal_nopenspeak();
}
inline void SystemInfo::_internal_set_nopenspeak(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nopenspeak_ = value;
}
inline void SystemInfo::set_nopenspeak(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nopenspeak(value);
  // @@protoc_insertion_point(field_set:SystemInfo.nOpenSpeak)
}

// -------------------------------------------------------------------

// HitScore

// .PERSON_PART hitPart = 1;
inline void HitScore::clear_hitpart() {
  hitpart_ = 0;
}
inline ::PERSON_PART HitScore::_internal_hitpart() const {
  return static_cast< ::PERSON_PART >(hitpart_);
}
inline ::PERSON_PART HitScore::hitpart() const {
  // @@protoc_insertion_point(field_get:HitScore.hitPart)
  return _internal_hitpart();
}
inline void HitScore::_internal_set_hitpart(::PERSON_PART value) {
  
  hitpart_ = value;
}
inline void HitScore::set_hitpart(::PERSON_PART value) {
  _internal_set_hitpart(value);
  // @@protoc_insertion_point(field_set:HitScore.hitPart)
}

// int32 nScore = 2;
inline void HitScore::clear_nscore() {
  nscore_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitScore::_internal_nscore() const {
  return nscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitScore::nscore() const {
  // @@protoc_insertion_point(field_get:HitScore.nScore)
  return _internal_nscore();
}
inline void HitScore::_internal_set_nscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nscore_ = value;
}
inline void HitScore::set_nscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nscore(value);
  // @@protoc_insertion_point(field_set:HitScore.nScore)
}

// -------------------------------------------------------------------

// HitRate

// .PERSON_PART hitPart = 1;
inline void HitRate::clear_hitpart() {
  hitpart_ = 0;
}
inline ::PERSON_PART HitRate::_internal_hitpart() const {
  return static_cast< ::PERSON_PART >(hitpart_);
}
inline ::PERSON_PART HitRate::hitpart() const {
  // @@protoc_insertion_point(field_get:HitRate.hitPart)
  return _internal_hitpart();
}
inline void HitRate::_internal_set_hitpart(::PERSON_PART value) {
  
  hitpart_ = value;
}
inline void HitRate::set_hitpart(::PERSON_PART value) {
  _internal_set_hitpart(value);
  // @@protoc_insertion_point(field_set:HitRate.hitPart)
}

// int32 nRate = 2;
inline void HitRate::clear_nrate() {
  nrate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitRate::_internal_nrate() const {
  return nrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitRate::nrate() const {
  // @@protoc_insertion_point(field_get:HitRate.nRate)
  return _internal_nrate();
}
inline void HitRate::_internal_set_nrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nrate_ = value;
}
inline void HitRate::set_nrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nrate(value);
  // @@protoc_insertion_point(field_set:HitRate.nRate)
}

// -------------------------------------------------------------------

// SimulationInfo

// int32 nSycnTime = 1;
inline void SimulationInfo::clear_nsycntime() {
  nsycntime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimulationInfo::_internal_nsycntime() const {
  return nsycntime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimulationInfo::nsycntime() const {
  // @@protoc_insertion_point(field_get:SimulationInfo.nSycnTime)
  return _internal_nsycntime();
}
inline void SimulationInfo::_internal_set_nsycntime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nsycntime_ = value;
}
inline void SimulationInfo::set_nsycntime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nsycntime(value);
  // @@protoc_insertion_point(field_set:SimulationInfo.nSycnTime)
}

// int32 nTime2Drop = 2;
inline void SimulationInfo::clear_ntime2drop() {
  ntime2drop_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimulationInfo::_internal_ntime2drop() const {
  return ntime2drop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimulationInfo::ntime2drop() const {
  // @@protoc_insertion_point(field_get:SimulationInfo.nTime2Drop)
  return _internal_ntime2drop();
}
inline void SimulationInfo::_internal_set_ntime2drop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ntime2drop_ = value;
}
inline void SimulationInfo::set_ntime2drop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ntime2drop(value);
  // @@protoc_insertion_point(field_set:SimulationInfo.nTime2Drop)
}

// int32 nInitbullets = 3;
inline void SimulationInfo::clear_ninitbullets() {
  ninitbullets_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimulationInfo::_internal_ninitbullets() const {
  return ninitbullets_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimulationInfo::ninitbullets() const {
  // @@protoc_insertion_point(field_get:SimulationInfo.nInitbullets)
  return _internal_ninitbullets();
}
inline void SimulationInfo::_internal_set_ninitbullets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ninitbullets_ = value;
}
inline void SimulationInfo::set_ninitbullets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ninitbullets(value);
  // @@protoc_insertion_point(field_set:SimulationInfo.nInitbullets)
}

// bool bKillSelf = 4;
inline void SimulationInfo::clear_bkillself() {
  bkillself_ = false;
}
inline bool SimulationInfo::_internal_bkillself() const {
  return bkillself_;
}
inline bool SimulationInfo::bkillself() const {
  // @@protoc_insertion_point(field_get:SimulationInfo.bKillSelf)
  return _internal_bkillself();
}
inline void SimulationInfo::_internal_set_bkillself(bool value) {
  
  bkillself_ = value;
}
inline void SimulationInfo::set_bkillself(bool value) {
  _internal_set_bkillself(value);
  // @@protoc_insertion_point(field_set:SimulationInfo.bKillSelf)
}

// bool bDeaKill = 5;
inline void SimulationInfo::clear_bdeakill() {
  bdeakill_ = false;
}
inline bool SimulationInfo::_internal_bdeakill() const {
  return bdeakill_;
}
inline bool SimulationInfo::bdeakill() const {
  // @@protoc_insertion_point(field_get:SimulationInfo.bDeaKill)
  return _internal_bdeakill();
}
inline void SimulationInfo::_internal_set_bdeakill(bool value) {
  
  bdeakill_ = value;
}
inline void SimulationInfo::set_bdeakill(bool value) {
  _internal_set_bdeakill(value);
  // @@protoc_insertion_point(field_set:SimulationInfo.bDeaKill)
}

// repeated .HitScore scoreSet = 6;
inline int SimulationInfo::_internal_scoreset_size() const {
  return scoreset_.size();
}
inline int SimulationInfo::scoreset_size() const {
  return _internal_scoreset_size();
}
inline void SimulationInfo::clear_scoreset() {
  scoreset_.Clear();
}
inline ::HitScore* SimulationInfo::mutable_scoreset(int index) {
  // @@protoc_insertion_point(field_mutable:SimulationInfo.scoreSet)
  return scoreset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HitScore >*
SimulationInfo::mutable_scoreset() {
  // @@protoc_insertion_point(field_mutable_list:SimulationInfo.scoreSet)
  return &scoreset_;
}
inline const ::HitScore& SimulationInfo::_internal_scoreset(int index) const {
  return scoreset_.Get(index);
}
inline const ::HitScore& SimulationInfo::scoreset(int index) const {
  // @@protoc_insertion_point(field_get:SimulationInfo.scoreSet)
  return _internal_scoreset(index);
}
inline ::HitScore* SimulationInfo::_internal_add_scoreset() {
  return scoreset_.Add();
}
inline ::HitScore* SimulationInfo::add_scoreset() {
  // @@protoc_insertion_point(field_add:SimulationInfo.scoreSet)
  return _internal_add_scoreset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HitScore >&
SimulationInfo::scoreset() const {
  // @@protoc_insertion_point(field_list:SimulationInfo.scoreSet)
  return scoreset_;
}

// repeated .HitRate rateSet = 7;
inline int SimulationInfo::_internal_rateset_size() const {
  return rateset_.size();
}
inline int SimulationInfo::rateset_size() const {
  return _internal_rateset_size();
}
inline void SimulationInfo::clear_rateset() {
  rateset_.Clear();
}
inline ::HitRate* SimulationInfo::mutable_rateset(int index) {
  // @@protoc_insertion_point(field_mutable:SimulationInfo.rateSet)
  return rateset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HitRate >*
SimulationInfo::mutable_rateset() {
  // @@protoc_insertion_point(field_mutable_list:SimulationInfo.rateSet)
  return &rateset_;
}
inline const ::HitRate& SimulationInfo::_internal_rateset(int index) const {
  return rateset_.Get(index);
}
inline const ::HitRate& SimulationInfo::rateset(int index) const {
  // @@protoc_insertion_point(field_get:SimulationInfo.rateSet)
  return _internal_rateset(index);
}
inline ::HitRate* SimulationInfo::_internal_add_rateset() {
  return rateset_.Add();
}
inline ::HitRate* SimulationInfo::add_rateset() {
  // @@protoc_insertion_point(field_add:SimulationInfo.rateSet)
  return _internal_add_rateset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HitRate >&
SimulationInfo::rateset() const {
  // @@protoc_insertion_point(field_list:SimulationInfo.rateSet)
  return rateset_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Config_2eproto
