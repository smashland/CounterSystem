// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PersonInfo.proto

#include "PersonInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_PersonInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectStatus_PersonInfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PersonInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HurtInfo_PersonInfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PersonInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Postion_PersonInfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PersonInfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeaponStatus_PersonInfo_2eproto;
class HurtInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HurtInfo> _instance;
} _HurtInfo_default_instance_;
class PostionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Postion> _instance;
} _Postion_default_instance_;
class WeaponStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeaponStatus> _instance;
} _WeaponStatus_default_instance_;
class ConnectStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectStatus> _instance;
} _ConnectStatus_default_instance_;
class PersonInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersonInfo> _instance;
} _PersonInfo_default_instance_;
static void InitDefaultsscc_info_ConnectStatus_PersonInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConnectStatus_default_instance_;
    new (ptr) ::ConnectStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectStatus_PersonInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConnectStatus_PersonInfo_2eproto}, {
      &scc_info_WeaponStatus_PersonInfo_2eproto.base,}};

static void InitDefaultsscc_info_HurtInfo_PersonInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HurtInfo_default_instance_;
    new (ptr) ::HurtInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HurtInfo_PersonInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HurtInfo_PersonInfo_2eproto}, {}};

static void InitDefaultsscc_info_PersonInfo_PersonInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PersonInfo_default_instance_;
    new (ptr) ::PersonInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PersonInfo_PersonInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PersonInfo_PersonInfo_2eproto}, {
      &scc_info_ConnectStatus_PersonInfo_2eproto.base,
      &scc_info_Postion_PersonInfo_2eproto.base,
      &scc_info_HurtInfo_PersonInfo_2eproto.base,}};

static void InitDefaultsscc_info_Postion_PersonInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Postion_default_instance_;
    new (ptr) ::Postion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Postion_PersonInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Postion_PersonInfo_2eproto}, {}};

static void InitDefaultsscc_info_WeaponStatus_PersonInfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WeaponStatus_default_instance_;
    new (ptr) ::WeaponStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeaponStatus_PersonInfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WeaponStatus_PersonInfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PersonInfo_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_PersonInfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PersonInfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_PersonInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HurtInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HurtInfo, id_),
  PROTOBUF_FIELD_OFFSET(::HurtInfo, type_),
  PROTOBUF_FIELD_OFFSET(::HurtInfo, hurtpart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Postion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Postion, ntime_),
  PROTOBUF_FIELD_OFFSET(::Postion, dlon_),
  PROTOBUF_FIELD_OFFSET(::Postion, dlat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WeaponStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WeaponStatus, weapontype_),
  PROTOBUF_FIELD_OFFSET(::WeaponStatus, bulletnum_),
  PROTOBUF_FIELD_OFFSET(::WeaponStatus, contype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConnectStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConnectStatus, btk_),
  PROTOBUF_FIELD_OFFSET(::ConnectStatus, bgps_),
  PROTOBUF_FIELD_OFFSET(::ConnectStatus, bstand_),
  PROTOBUF_FIELD_OFFSET(::ConnectStatus, fbatyvalue_),
  PROTOBUF_FIELD_OFFSET(::ConnectStatus, weapons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PersonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PersonInfo, id_),
  PROTOBUF_FIELD_OFFSET(::PersonInfo, hearth_),
  PROTOBUF_FIELD_OFFSET(::PersonInfo, relive_),
  PROTOBUF_FIELD_OFFSET(::PersonInfo, setdeath_),
  PROTOBUF_FIELD_OFFSET(::PersonInfo, curtstatus_),
  PROTOBUF_FIELD_OFFSET(::PersonInfo, curtpos_),
  PROTOBUF_FIELD_OFFSET(::PersonInfo, hurtinfo_),
  PROTOBUF_FIELD_OFFSET(::PersonInfo, hitinfo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::HurtInfo)},
  { 8, -1, sizeof(::Postion)},
  { 16, -1, sizeof(::WeaponStatus)},
  { 24, -1, sizeof(::ConnectStatus)},
  { 34, -1, sizeof(::PersonInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HurtInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Postion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WeaponStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConnectStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PersonInfo_default_instance_),
};

const char descriptor_table_protodef_PersonInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020PersonInfo.proto\032\020TypeDefine.proto\"N\n\010"
  "HurtInfo\022\n\n\002id\030\001 \001(\r\022\026\n\004type\030\002 \001(\0162\010.Gun"
  "Type\022\036\n\010hurtPart\030\003 \001(\0162\014.PERSON_PART\"4\n\007"
  "Postion\022\r\n\005nTime\030\001 \001(\r\022\014\n\004dLon\030\002 \001(\001\022\014\n\004"
  "dLat\030\003 \001(\001\"^\n\014WeaponStatus\022\034\n\nweaponType"
  "\030\001 \001(\0162\010.GunType\022\021\n\tbulletNum\030\002 \001(\r\022\035\n\007c"
  "onType\030\003 \001(\0162\014.Weapon_Type\"n\n\rConnectSta"
  "tus\022\013\n\003bTK\030\001 \001(\010\022\014\n\004bGPS\030\002 \001(\010\022\016\n\006bStand"
  "\030\003 \001(\010\022\022\n\nfBatyValue\030\004 \001(\002\022\036\n\007weapons\030\005 "
  "\003(\0132\r.WeaponStatus\"\302\001\n\nPersonInfo\022\n\n\002id\030"
  "\001 \001(\r\022\016\n\006hearth\030\002 \001(\005\022\016\n\006reLive\030\003 \001(\r\022\020\n"
  "\010setDeath\030\004 \001(\r\022\"\n\ncurtStatus\030\005 \001(\0132\016.Co"
  "nnectStatus\022\031\n\007curtPos\030\006 \001(\0132\010.Postion\022\033"
  "\n\010hurtInfo\030\007 \003(\0132\t.HurtInfo\022\032\n\007hitInfo\030\010"
  " \003(\0132\t.HurtInfob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_PersonInfo_2eproto_deps[1] = {
  &::descriptor_table_TypeDefine_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_PersonInfo_2eproto_sccs[5] = {
  &scc_info_ConnectStatus_PersonInfo_2eproto.base,
  &scc_info_HurtInfo_PersonInfo_2eproto.base,
  &scc_info_PersonInfo_PersonInfo_2eproto.base,
  &scc_info_Postion_PersonInfo_2eproto.base,
  &scc_info_WeaponStatus_PersonInfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PersonInfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PersonInfo_2eproto = {
  false, false, descriptor_table_protodef_PersonInfo_2eproto, "PersonInfo.proto", 583,
  &descriptor_table_PersonInfo_2eproto_once, descriptor_table_PersonInfo_2eproto_sccs, descriptor_table_PersonInfo_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_PersonInfo_2eproto::offsets,
  file_level_metadata_PersonInfo_2eproto, 5, file_level_enum_descriptors_PersonInfo_2eproto, file_level_service_descriptors_PersonInfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_PersonInfo_2eproto(&descriptor_table_PersonInfo_2eproto);

// ===================================================================

class HurtInfo::_Internal {
 public:
};

HurtInfo::HurtInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HurtInfo)
}
HurtInfo::HurtInfo(const HurtInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hurtpart_) -
    reinterpret_cast<char*>(&id_)) + sizeof(hurtpart_));
  // @@protoc_insertion_point(copy_constructor:HurtInfo)
}

void HurtInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&hurtpart_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hurtpart_));
}

HurtInfo::~HurtInfo() {
  // @@protoc_insertion_point(destructor:HurtInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HurtInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HurtInfo::ArenaDtor(void* object) {
  HurtInfo* _this = reinterpret_cast< HurtInfo* >(object);
  (void)_this;
}
void HurtInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HurtInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HurtInfo& HurtInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HurtInfo_PersonInfo_2eproto.base);
  return *internal_default_instance();
}


void HurtInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:HurtInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hurtpart_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hurtpart_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HurtInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GunType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::GunType>(val));
        } else goto handle_unusual;
        continue;
      // .PERSON_PART hurtPart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hurtpart(static_cast<::PERSON_PART>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HurtInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HurtInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .GunType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .PERSON_PART hurtPart = 3;
  if (this->hurtpart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_hurtpart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HurtInfo)
  return target;
}

size_t HurtInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HurtInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .GunType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .PERSON_PART hurtPart = 3;
  if (this->hurtpart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hurtpart());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HurtInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HurtInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HurtInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HurtInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HurtInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HurtInfo)
    MergeFrom(*source);
  }
}

void HurtInfo::MergeFrom(const HurtInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HurtInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.hurtpart() != 0) {
    _internal_set_hurtpart(from._internal_hurtpart());
  }
}

void HurtInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HurtInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HurtInfo::CopyFrom(const HurtInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HurtInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HurtInfo::IsInitialized() const {
  return true;
}

void HurtInfo::InternalSwap(HurtInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HurtInfo, hurtpart_)
      + sizeof(HurtInfo::hurtpart_)
      - PROTOBUF_FIELD_OFFSET(HurtInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HurtInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Postion::_Internal {
 public:
};

Postion::Postion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Postion)
}
Postion::Postion(const Postion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dlon_, &from.dlon_,
    static_cast<size_t>(reinterpret_cast<char*>(&ntime_) -
    reinterpret_cast<char*>(&dlon_)) + sizeof(ntime_));
  // @@protoc_insertion_point(copy_constructor:Postion)
}

void Postion::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dlon_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ntime_) -
      reinterpret_cast<char*>(&dlon_)) + sizeof(ntime_));
}

Postion::~Postion() {
  // @@protoc_insertion_point(destructor:Postion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Postion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Postion::ArenaDtor(void* object) {
  Postion* _this = reinterpret_cast< Postion* >(object);
  (void)_this;
}
void Postion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Postion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Postion& Postion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Postion_PersonInfo_2eproto.base);
  return *internal_default_instance();
}


void Postion::Clear() {
// @@protoc_insertion_point(message_clear_start:Postion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dlon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ntime_) -
      reinterpret_cast<char*>(&dlon_)) + sizeof(ntime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Postion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 nTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ntime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dLon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          dlon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dLat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          dlat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Postion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Postion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nTime = 1;
  if (this->ntime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ntime(), target);
  }

  // double dLon = 2;
  if (!(this->dlon() <= 0 && this->dlon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_dlon(), target);
  }

  // double dLat = 3;
  if (!(this->dlat() <= 0 && this->dlat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_dlat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Postion)
  return target;
}

size_t Postion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Postion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dLon = 2;
  if (!(this->dlon() <= 0 && this->dlon() >= 0)) {
    total_size += 1 + 8;
  }

  // double dLat = 3;
  if (!(this->dlat() <= 0 && this->dlat() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 nTime = 1;
  if (this->ntime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ntime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Postion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Postion)
  GOOGLE_DCHECK_NE(&from, this);
  const Postion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Postion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Postion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Postion)
    MergeFrom(*source);
  }
}

void Postion::MergeFrom(const Postion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Postion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dlon() <= 0 && from.dlon() >= 0)) {
    _internal_set_dlon(from._internal_dlon());
  }
  if (!(from.dlat() <= 0 && from.dlat() >= 0)) {
    _internal_set_dlat(from._internal_dlat());
  }
  if (from.ntime() != 0) {
    _internal_set_ntime(from._internal_ntime());
  }
}

void Postion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Postion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Postion::CopyFrom(const Postion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Postion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Postion::IsInitialized() const {
  return true;
}

void Postion::InternalSwap(Postion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Postion, ntime_)
      + sizeof(Postion::ntime_)
      - PROTOBUF_FIELD_OFFSET(Postion, dlon_)>(
          reinterpret_cast<char*>(&dlon_),
          reinterpret_cast<char*>(&other->dlon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Postion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WeaponStatus::_Internal {
 public:
};

WeaponStatus::WeaponStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WeaponStatus)
}
WeaponStatus::WeaponStatus(const WeaponStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weapontype_, &from.weapontype_,
    static_cast<size_t>(reinterpret_cast<char*>(&contype_) -
    reinterpret_cast<char*>(&weapontype_)) + sizeof(contype_));
  // @@protoc_insertion_point(copy_constructor:WeaponStatus)
}

void WeaponStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&weapontype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&contype_) -
      reinterpret_cast<char*>(&weapontype_)) + sizeof(contype_));
}

WeaponStatus::~WeaponStatus() {
  // @@protoc_insertion_point(destructor:WeaponStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WeaponStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WeaponStatus::ArenaDtor(void* object) {
  WeaponStatus* _this = reinterpret_cast< WeaponStatus* >(object);
  (void)_this;
}
void WeaponStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WeaponStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeaponStatus& WeaponStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeaponStatus_PersonInfo_2eproto.base);
  return *internal_default_instance();
}


void WeaponStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:WeaponStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&weapontype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contype_) -
      reinterpret_cast<char*>(&weapontype_)) + sizeof(contype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeaponStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GunType weaponType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_weapontype(static_cast<::GunType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 bulletNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bulletnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Weapon_Type conType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_contype(static_cast<::Weapon_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeaponStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WeaponStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GunType weaponType = 1;
  if (this->weapontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_weapontype(), target);
  }

  // uint32 bulletNum = 2;
  if (this->bulletnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bulletnum(), target);
  }

  // .Weapon_Type conType = 3;
  if (this->contype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_contype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WeaponStatus)
  return target;
}

size_t WeaponStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WeaponStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GunType weaponType = 1;
  if (this->weapontype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_weapontype());
  }

  // uint32 bulletNum = 2;
  if (this->bulletnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bulletnum());
  }

  // .Weapon_Type conType = 3;
  if (this->contype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeaponStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WeaponStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeaponStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WeaponStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WeaponStatus)
    MergeFrom(*source);
  }
}

void WeaponStatus::MergeFrom(const WeaponStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WeaponStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.weapontype() != 0) {
    _internal_set_weapontype(from._internal_weapontype());
  }
  if (from.bulletnum() != 0) {
    _internal_set_bulletnum(from._internal_bulletnum());
  }
  if (from.contype() != 0) {
    _internal_set_contype(from._internal_contype());
  }
}

void WeaponStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WeaponStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponStatus::CopyFrom(const WeaponStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WeaponStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponStatus::IsInitialized() const {
  return true;
}

void WeaponStatus::InternalSwap(WeaponStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WeaponStatus, contype_)
      + sizeof(WeaponStatus::contype_)
      - PROTOBUF_FIELD_OFFSET(WeaponStatus, weapontype_)>(
          reinterpret_cast<char*>(&weapontype_),
          reinterpret_cast<char*>(&other->weapontype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WeaponStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConnectStatus::_Internal {
 public:
};

ConnectStatus::ConnectStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  weapons_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ConnectStatus)
}
ConnectStatus::ConnectStatus(const ConnectStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      weapons_(from.weapons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&btk_, &from.btk_,
    static_cast<size_t>(reinterpret_cast<char*>(&fbatyvalue_) -
    reinterpret_cast<char*>(&btk_)) + sizeof(fbatyvalue_));
  // @@protoc_insertion_point(copy_constructor:ConnectStatus)
}

void ConnectStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectStatus_PersonInfo_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&btk_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fbatyvalue_) -
      reinterpret_cast<char*>(&btk_)) + sizeof(fbatyvalue_));
}

ConnectStatus::~ConnectStatus() {
  // @@protoc_insertion_point(destructor:ConnectStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConnectStatus::ArenaDtor(void* object) {
  ConnectStatus* _this = reinterpret_cast< ConnectStatus* >(object);
  (void)_this;
}
void ConnectStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectStatus& ConnectStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectStatus_PersonInfo_2eproto.base);
  return *internal_default_instance();
}


void ConnectStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weapons_.Clear();
  ::memset(&btk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fbatyvalue_) -
      reinterpret_cast<char*>(&btk_)) + sizeof(fbatyvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool bTK = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          btk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bGPS = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bgps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bStand = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bstand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fBatyValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          fbatyvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .WeaponStatus weapons = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weapons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bTK = 1;
  if (this->btk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_btk(), target);
  }

  // bool bGPS = 2;
  if (this->bgps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bgps(), target);
  }

  // bool bStand = 3;
  if (this->bstand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bstand(), target);
  }

  // float fBatyValue = 4;
  if (!(this->fbatyvalue() <= 0 && this->fbatyvalue() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_fbatyvalue(), target);
  }

  // repeated .WeaponStatus weapons = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_weapons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_weapons(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectStatus)
  return target;
}

size_t ConnectStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .WeaponStatus weapons = 5;
  total_size += 1UL * this->_internal_weapons_size();
  for (const auto& msg : this->weapons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool bTK = 1;
  if (this->btk() != 0) {
    total_size += 1 + 1;
  }

  // bool bGPS = 2;
  if (this->bgps() != 0) {
    total_size += 1 + 1;
  }

  // bool bStand = 3;
  if (this->bstand() != 0) {
    total_size += 1 + 1;
  }

  // float fBatyValue = 4;
  if (!(this->fbatyvalue() <= 0 && this->fbatyvalue() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConnectStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConnectStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConnectStatus)
    MergeFrom(*source);
  }
}

void ConnectStatus::MergeFrom(const ConnectStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weapons_.MergeFrom(from.weapons_);
  if (from.btk() != 0) {
    _internal_set_btk(from._internal_btk());
  }
  if (from.bgps() != 0) {
    _internal_set_bgps(from._internal_bgps());
  }
  if (from.bstand() != 0) {
    _internal_set_bstand(from._internal_bstand());
  }
  if (!(from.fbatyvalue() <= 0 && from.fbatyvalue() >= 0)) {
    _internal_set_fbatyvalue(from._internal_fbatyvalue());
  }
}

void ConnectStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConnectStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectStatus::CopyFrom(const ConnectStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectStatus::IsInitialized() const {
  return true;
}

void ConnectStatus::InternalSwap(ConnectStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  weapons_.InternalSwap(&other->weapons_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectStatus, fbatyvalue_)
      + sizeof(ConnectStatus::fbatyvalue_)
      - PROTOBUF_FIELD_OFFSET(ConnectStatus, btk_)>(
          reinterpret_cast<char*>(&btk_),
          reinterpret_cast<char*>(&other->btk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PersonInfo::_Internal {
 public:
  static const ::ConnectStatus& curtstatus(const PersonInfo* msg);
  static const ::Postion& curtpos(const PersonInfo* msg);
};

const ::ConnectStatus&
PersonInfo::_Internal::curtstatus(const PersonInfo* msg) {
  return *msg->curtstatus_;
}
const ::Postion&
PersonInfo::_Internal::curtpos(const PersonInfo* msg) {
  return *msg->curtpos_;
}
PersonInfo::PersonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hurtinfo_(arena),
  hitinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PersonInfo)
}
PersonInfo::PersonInfo(const PersonInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hurtinfo_(from.hurtinfo_),
      hitinfo_(from.hitinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_curtstatus()) {
    curtstatus_ = new ::ConnectStatus(*from.curtstatus_);
  } else {
    curtstatus_ = nullptr;
  }
  if (from._internal_has_curtpos()) {
    curtpos_ = new ::Postion(*from.curtpos_);
  } else {
    curtpos_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&setdeath_) -
    reinterpret_cast<char*>(&id_)) + sizeof(setdeath_));
  // @@protoc_insertion_point(copy_constructor:PersonInfo)
}

void PersonInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersonInfo_PersonInfo_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&curtstatus_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&setdeath_) -
      reinterpret_cast<char*>(&curtstatus_)) + sizeof(setdeath_));
}

PersonInfo::~PersonInfo() {
  // @@protoc_insertion_point(destructor:PersonInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PersonInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete curtstatus_;
  if (this != internal_default_instance()) delete curtpos_;
}

void PersonInfo::ArenaDtor(void* object) {
  PersonInfo* _this = reinterpret_cast< PersonInfo* >(object);
  (void)_this;
}
void PersonInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PersonInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersonInfo& PersonInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersonInfo_PersonInfo_2eproto.base);
  return *internal_default_instance();
}


void PersonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PersonInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hurtinfo_.Clear();
  hitinfo_.Clear();
  if (GetArena() == nullptr && curtstatus_ != nullptr) {
    delete curtstatus_;
  }
  curtstatus_ = nullptr;
  if (GetArena() == nullptr && curtpos_ != nullptr) {
    delete curtpos_;
  }
  curtpos_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setdeath_) -
      reinterpret_cast<char*>(&id_)) + sizeof(setdeath_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersonInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hearth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hearth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reLive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          relive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 setDeath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          setdeath_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ConnectStatus curtStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_curtstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Postion curtPos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_curtpos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .HurtInfo hurtInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hurtinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HurtInfo hitInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hitinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PersonInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PersonInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 hearth = 2;
  if (this->hearth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hearth(), target);
  }

  // uint32 reLive = 3;
  if (this->relive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_relive(), target);
  }

  // uint32 setDeath = 4;
  if (this->setdeath() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_setdeath(), target);
  }

  // .ConnectStatus curtStatus = 5;
  if (this->has_curtstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::curtstatus(this), target, stream);
  }

  // .Postion curtPos = 6;
  if (this->has_curtpos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::curtpos(this), target, stream);
  }

  // repeated .HurtInfo hurtInfo = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hurtinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_hurtinfo(i), target, stream);
  }

  // repeated .HurtInfo hitInfo = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hitinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_hitinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PersonInfo)
  return target;
}

size_t PersonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PersonInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HurtInfo hurtInfo = 7;
  total_size += 1UL * this->_internal_hurtinfo_size();
  for (const auto& msg : this->hurtinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HurtInfo hitInfo = 8;
  total_size += 1UL * this->_internal_hitinfo_size();
  for (const auto& msg : this->hitinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ConnectStatus curtStatus = 5;
  if (this->has_curtstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *curtstatus_);
  }

  // .Postion curtPos = 6;
  if (this->has_curtpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *curtpos_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // int32 hearth = 2;
  if (this->hearth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hearth());
  }

  // uint32 reLive = 3;
  if (this->relive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_relive());
  }

  // uint32 setDeath = 4;
  if (this->setdeath() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_setdeath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersonInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PersonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PersonInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersonInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PersonInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PersonInfo)
    MergeFrom(*source);
  }
}

void PersonInfo::MergeFrom(const PersonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PersonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hurtinfo_.MergeFrom(from.hurtinfo_);
  hitinfo_.MergeFrom(from.hitinfo_);
  if (from.has_curtstatus()) {
    _internal_mutable_curtstatus()->::ConnectStatus::MergeFrom(from._internal_curtstatus());
  }
  if (from.has_curtpos()) {
    _internal_mutable_curtpos()->::Postion::MergeFrom(from._internal_curtpos());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.hearth() != 0) {
    _internal_set_hearth(from._internal_hearth());
  }
  if (from.relive() != 0) {
    _internal_set_relive(from._internal_relive());
  }
  if (from.setdeath() != 0) {
    _internal_set_setdeath(from._internal_setdeath());
  }
}

void PersonInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PersonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonInfo::CopyFrom(const PersonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PersonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonInfo::IsInitialized() const {
  return true;
}

void PersonInfo::InternalSwap(PersonInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hurtinfo_.InternalSwap(&other->hurtinfo_);
  hitinfo_.InternalSwap(&other->hitinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersonInfo, setdeath_)
      + sizeof(PersonInfo::setdeath_)
      - PROTOBUF_FIELD_OFFSET(PersonInfo, curtstatus_)>(
          reinterpret_cast<char*>(&curtstatus_),
          reinterpret_cast<char*>(&other->curtstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersonInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HurtInfo* Arena::CreateMaybeMessage< ::HurtInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HurtInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Postion* Arena::CreateMaybeMessage< ::Postion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Postion >(arena);
}
template<> PROTOBUF_NOINLINE ::WeaponStatus* Arena::CreateMaybeMessage< ::WeaponStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WeaponStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ConnectStatus* Arena::CreateMaybeMessage< ::ConnectStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConnectStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::PersonInfo* Arena::CreateMaybeMessage< ::PersonInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PersonInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
