// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PersonInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PersonInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PersonInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TypeDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PersonInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PersonInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PersonInfo_2eproto;
class ConnectStatus;
class ConnectStatusDefaultTypeInternal;
extern ConnectStatusDefaultTypeInternal _ConnectStatus_default_instance_;
class HurtInfo;
class HurtInfoDefaultTypeInternal;
extern HurtInfoDefaultTypeInternal _HurtInfo_default_instance_;
class PersonInfo;
class PersonInfoDefaultTypeInternal;
extern PersonInfoDefaultTypeInternal _PersonInfo_default_instance_;
class Postion;
class PostionDefaultTypeInternal;
extern PostionDefaultTypeInternal _Postion_default_instance_;
class WeaponStatus;
class WeaponStatusDefaultTypeInternal;
extern WeaponStatusDefaultTypeInternal _WeaponStatus_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConnectStatus* Arena::CreateMaybeMessage<::ConnectStatus>(Arena*);
template<> ::HurtInfo* Arena::CreateMaybeMessage<::HurtInfo>(Arena*);
template<> ::PersonInfo* Arena::CreateMaybeMessage<::PersonInfo>(Arena*);
template<> ::Postion* Arena::CreateMaybeMessage<::Postion>(Arena*);
template<> ::WeaponStatus* Arena::CreateMaybeMessage<::WeaponStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class HurtInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HurtInfo) */ {
 public:
  inline HurtInfo() : HurtInfo(nullptr) {}
  virtual ~HurtInfo();

  HurtInfo(const HurtInfo& from);
  HurtInfo(HurtInfo&& from) noexcept
    : HurtInfo() {
    *this = ::std::move(from);
  }

  inline HurtInfo& operator=(const HurtInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HurtInfo& operator=(HurtInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HurtInfo& default_instance();

  static inline const HurtInfo* internal_default_instance() {
    return reinterpret_cast<const HurtInfo*>(
               &_HurtInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HurtInfo& a, HurtInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HurtInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HurtInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HurtInfo* New() const final {
    return CreateMaybeMessage<HurtInfo>(nullptr);
  }

  HurtInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HurtInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HurtInfo& from);
  void MergeFrom(const HurtInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HurtInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HurtInfo";
  }
  protected:
  explicit HurtInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PersonInfo_2eproto);
    return ::descriptor_table_PersonInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kHurtPartFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .GunType type = 2;
  void clear_type();
  ::GunType type() const;
  void set_type(::GunType value);
  private:
  ::GunType _internal_type() const;
  void _internal_set_type(::GunType value);
  public:

  // .PERSON_PART hurtPart = 3;
  void clear_hurtpart();
  ::PERSON_PART hurtpart() const;
  void set_hurtpart(::PERSON_PART value);
  private:
  ::PERSON_PART _internal_hurtpart() const;
  void _internal_set_hurtpart(::PERSON_PART value);
  public:

  // @@protoc_insertion_point(class_scope:HurtInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int type_;
  int hurtpart_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PersonInfo_2eproto;
};
// -------------------------------------------------------------------

class Postion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Postion) */ {
 public:
  inline Postion() : Postion(nullptr) {}
  virtual ~Postion();

  Postion(const Postion& from);
  Postion(Postion&& from) noexcept
    : Postion() {
    *this = ::std::move(from);
  }

  inline Postion& operator=(const Postion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Postion& operator=(Postion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Postion& default_instance();

  static inline const Postion* internal_default_instance() {
    return reinterpret_cast<const Postion*>(
               &_Postion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Postion& a, Postion& b) {
    a.Swap(&b);
  }
  inline void Swap(Postion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Postion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Postion* New() const final {
    return CreateMaybeMessage<Postion>(nullptr);
  }

  Postion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Postion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Postion& from);
  void MergeFrom(const Postion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Postion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Postion";
  }
  protected:
  explicit Postion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PersonInfo_2eproto);
    return ::descriptor_table_PersonInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDLonFieldNumber = 2,
    kDLatFieldNumber = 3,
    kNTimeFieldNumber = 1,
  };
  // double dLon = 2;
  void clear_dlon();
  double dlon() const;
  void set_dlon(double value);
  private:
  double _internal_dlon() const;
  void _internal_set_dlon(double value);
  public:

  // double dLat = 3;
  void clear_dlat();
  double dlat() const;
  void set_dlat(double value);
  private:
  double _internal_dlat() const;
  void _internal_set_dlat(double value);
  public:

  // uint32 nTime = 1;
  void clear_ntime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ntime() const;
  void set_ntime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ntime() const;
  void _internal_set_ntime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Postion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dlon_;
  double dlat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ntime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PersonInfo_2eproto;
};
// -------------------------------------------------------------------

class WeaponStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WeaponStatus) */ {
 public:
  inline WeaponStatus() : WeaponStatus(nullptr) {}
  virtual ~WeaponStatus();

  WeaponStatus(const WeaponStatus& from);
  WeaponStatus(WeaponStatus&& from) noexcept
    : WeaponStatus() {
    *this = ::std::move(from);
  }

  inline WeaponStatus& operator=(const WeaponStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeaponStatus& operator=(WeaponStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WeaponStatus& default_instance();

  static inline const WeaponStatus* internal_default_instance() {
    return reinterpret_cast<const WeaponStatus*>(
               &_WeaponStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WeaponStatus& a, WeaponStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(WeaponStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeaponStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeaponStatus* New() const final {
    return CreateMaybeMessage<WeaponStatus>(nullptr);
  }

  WeaponStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeaponStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WeaponStatus& from);
  void MergeFrom(const WeaponStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeaponStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WeaponStatus";
  }
  protected:
  explicit WeaponStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PersonInfo_2eproto);
    return ::descriptor_table_PersonInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponTypeFieldNumber = 1,
    kBulletNumFieldNumber = 2,
    kConTypeFieldNumber = 3,
  };
  // .GunType weaponType = 1;
  void clear_weapontype();
  ::GunType weapontype() const;
  void set_weapontype(::GunType value);
  private:
  ::GunType _internal_weapontype() const;
  void _internal_set_weapontype(::GunType value);
  public:

  // uint32 bulletNum = 2;
  void clear_bulletnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 bulletnum() const;
  void set_bulletnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bulletnum() const;
  void _internal_set_bulletnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Weapon_Type conType = 3;
  void clear_contype();
  ::Weapon_Type contype() const;
  void set_contype(::Weapon_Type value);
  private:
  ::Weapon_Type _internal_contype() const;
  void _internal_set_contype(::Weapon_Type value);
  public:

  // @@protoc_insertion_point(class_scope:WeaponStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int weapontype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bulletnum_;
  int contype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PersonInfo_2eproto;
};
// -------------------------------------------------------------------

class ConnectStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectStatus) */ {
 public:
  inline ConnectStatus() : ConnectStatus(nullptr) {}
  virtual ~ConnectStatus();

  ConnectStatus(const ConnectStatus& from);
  ConnectStatus(ConnectStatus&& from) noexcept
    : ConnectStatus() {
    *this = ::std::move(from);
  }

  inline ConnectStatus& operator=(const ConnectStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectStatus& operator=(ConnectStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectStatus& default_instance();

  static inline const ConnectStatus* internal_default_instance() {
    return reinterpret_cast<const ConnectStatus*>(
               &_ConnectStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConnectStatus& a, ConnectStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectStatus* New() const final {
    return CreateMaybeMessage<ConnectStatus>(nullptr);
  }

  ConnectStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectStatus& from);
  void MergeFrom(const ConnectStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectStatus";
  }
  protected:
  explicit ConnectStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PersonInfo_2eproto);
    return ::descriptor_table_PersonInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponsFieldNumber = 5,
    kBTKFieldNumber = 1,
    kBGPSFieldNumber = 2,
    kBStandFieldNumber = 3,
    kFBatyValueFieldNumber = 4,
  };
  // repeated .WeaponStatus weapons = 5;
  int weapons_size() const;
  private:
  int _internal_weapons_size() const;
  public:
  void clear_weapons();
  ::WeaponStatus* mutable_weapons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WeaponStatus >*
      mutable_weapons();
  private:
  const ::WeaponStatus& _internal_weapons(int index) const;
  ::WeaponStatus* _internal_add_weapons();
  public:
  const ::WeaponStatus& weapons(int index) const;
  ::WeaponStatus* add_weapons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WeaponStatus >&
      weapons() const;

  // bool bTK = 1;
  void clear_btk();
  bool btk() const;
  void set_btk(bool value);
  private:
  bool _internal_btk() const;
  void _internal_set_btk(bool value);
  public:

  // bool bGPS = 2;
  void clear_bgps();
  bool bgps() const;
  void set_bgps(bool value);
  private:
  bool _internal_bgps() const;
  void _internal_set_bgps(bool value);
  public:

  // bool bStand = 3;
  void clear_bstand();
  bool bstand() const;
  void set_bstand(bool value);
  private:
  bool _internal_bstand() const;
  void _internal_set_bstand(bool value);
  public:

  // float fBatyValue = 4;
  void clear_fbatyvalue();
  float fbatyvalue() const;
  void set_fbatyvalue(float value);
  private:
  float _internal_fbatyvalue() const;
  void _internal_set_fbatyvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:ConnectStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WeaponStatus > weapons_;
  bool btk_;
  bool bgps_;
  bool bstand_;
  float fbatyvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PersonInfo_2eproto;
};
// -------------------------------------------------------------------

class PersonInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PersonInfo) */ {
 public:
  inline PersonInfo() : PersonInfo(nullptr) {}
  virtual ~PersonInfo();

  PersonInfo(const PersonInfo& from);
  PersonInfo(PersonInfo&& from) noexcept
    : PersonInfo() {
    *this = ::std::move(from);
  }

  inline PersonInfo& operator=(const PersonInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersonInfo& operator=(PersonInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersonInfo& default_instance();

  static inline const PersonInfo* internal_default_instance() {
    return reinterpret_cast<const PersonInfo*>(
               &_PersonInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PersonInfo& a, PersonInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PersonInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersonInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersonInfo* New() const final {
    return CreateMaybeMessage<PersonInfo>(nullptr);
  }

  PersonInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersonInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersonInfo& from);
  void MergeFrom(const PersonInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PersonInfo";
  }
  protected:
  explicit PersonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PersonInfo_2eproto);
    return ::descriptor_table_PersonInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHurtInfoFieldNumber = 7,
    kHitInfoFieldNumber = 8,
    kNameFieldNumber = 9,
    kCurtStatusFieldNumber = 5,
    kCurtPosFieldNumber = 6,
    kIdFieldNumber = 1,
    kHearthFieldNumber = 2,
    kReLiveFieldNumber = 3,
    kSetDeathFieldNumber = 4,
  };
  // repeated .HurtInfo hurtInfo = 7;
  int hurtinfo_size() const;
  private:
  int _internal_hurtinfo_size() const;
  public:
  void clear_hurtinfo();
  ::HurtInfo* mutable_hurtinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HurtInfo >*
      mutable_hurtinfo();
  private:
  const ::HurtInfo& _internal_hurtinfo(int index) const;
  ::HurtInfo* _internal_add_hurtinfo();
  public:
  const ::HurtInfo& hurtinfo(int index) const;
  ::HurtInfo* add_hurtinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HurtInfo >&
      hurtinfo() const;

  // repeated .HurtInfo hitInfo = 8;
  int hitinfo_size() const;
  private:
  int _internal_hitinfo_size() const;
  public:
  void clear_hitinfo();
  ::HurtInfo* mutable_hitinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HurtInfo >*
      mutable_hitinfo();
  private:
  const ::HurtInfo& _internal_hitinfo(int index) const;
  ::HurtInfo* _internal_add_hitinfo();
  public:
  const ::HurtInfo& hitinfo(int index) const;
  ::HurtInfo* add_hitinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HurtInfo >&
      hitinfo() const;

  // string name = 9;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .ConnectStatus curtStatus = 5;
  bool has_curtstatus() const;
  private:
  bool _internal_has_curtstatus() const;
  public:
  void clear_curtstatus();
  const ::ConnectStatus& curtstatus() const;
  ::ConnectStatus* release_curtstatus();
  ::ConnectStatus* mutable_curtstatus();
  void set_allocated_curtstatus(::ConnectStatus* curtstatus);
  private:
  const ::ConnectStatus& _internal_curtstatus() const;
  ::ConnectStatus* _internal_mutable_curtstatus();
  public:
  void unsafe_arena_set_allocated_curtstatus(
      ::ConnectStatus* curtstatus);
  ::ConnectStatus* unsafe_arena_release_curtstatus();

  // .Postion curtPos = 6;
  bool has_curtpos() const;
  private:
  bool _internal_has_curtpos() const;
  public:
  void clear_curtpos();
  const ::Postion& curtpos() const;
  ::Postion* release_curtpos();
  ::Postion* mutable_curtpos();
  void set_allocated_curtpos(::Postion* curtpos);
  private:
  const ::Postion& _internal_curtpos() const;
  ::Postion* _internal_mutable_curtpos();
  public:
  void unsafe_arena_set_allocated_curtpos(
      ::Postion* curtpos);
  ::Postion* unsafe_arena_release_curtpos();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 hearth = 2;
  void clear_hearth();
  ::PROTOBUF_NAMESPACE_ID::int32 hearth() const;
  void set_hearth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hearth() const;
  void _internal_set_hearth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 reLive = 3;
  void clear_relive();
  ::PROTOBUF_NAMESPACE_ID::uint32 relive() const;
  void set_relive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_relive() const;
  void _internal_set_relive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 setDeath = 4;
  void clear_setdeath();
  ::PROTOBUF_NAMESPACE_ID::uint32 setdeath() const;
  void set_setdeath(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_setdeath() const;
  void _internal_set_setdeath(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PersonInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HurtInfo > hurtinfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HurtInfo > hitinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::ConnectStatus* curtstatus_;
  ::Postion* curtpos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 hearth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 relive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 setdeath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PersonInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HurtInfo

// uint32 id = 1;
inline void HurtInfo::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HurtInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HurtInfo::id() const {
  // @@protoc_insertion_point(field_get:HurtInfo.id)
  return _internal_id();
}
inline void HurtInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void HurtInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:HurtInfo.id)
}

// .GunType type = 2;
inline void HurtInfo::clear_type() {
  type_ = 0;
}
inline ::GunType HurtInfo::_internal_type() const {
  return static_cast< ::GunType >(type_);
}
inline ::GunType HurtInfo::type() const {
  // @@protoc_insertion_point(field_get:HurtInfo.type)
  return _internal_type();
}
inline void HurtInfo::_internal_set_type(::GunType value) {
  
  type_ = value;
}
inline void HurtInfo::set_type(::GunType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:HurtInfo.type)
}

// .PERSON_PART hurtPart = 3;
inline void HurtInfo::clear_hurtpart() {
  hurtpart_ = 0;
}
inline ::PERSON_PART HurtInfo::_internal_hurtpart() const {
  return static_cast< ::PERSON_PART >(hurtpart_);
}
inline ::PERSON_PART HurtInfo::hurtpart() const {
  // @@protoc_insertion_point(field_get:HurtInfo.hurtPart)
  return _internal_hurtpart();
}
inline void HurtInfo::_internal_set_hurtpart(::PERSON_PART value) {
  
  hurtpart_ = value;
}
inline void HurtInfo::set_hurtpart(::PERSON_PART value) {
  _internal_set_hurtpart(value);
  // @@protoc_insertion_point(field_set:HurtInfo.hurtPart)
}

// -------------------------------------------------------------------

// Postion

// uint32 nTime = 1;
inline void Postion::clear_ntime() {
  ntime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Postion::_internal_ntime() const {
  return ntime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Postion::ntime() const {
  // @@protoc_insertion_point(field_get:Postion.nTime)
  return _internal_ntime();
}
inline void Postion::_internal_set_ntime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ntime_ = value;
}
inline void Postion::set_ntime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ntime(value);
  // @@protoc_insertion_point(field_set:Postion.nTime)
}

// double dLon = 2;
inline void Postion::clear_dlon() {
  dlon_ = 0;
}
inline double Postion::_internal_dlon() const {
  return dlon_;
}
inline double Postion::dlon() const {
  // @@protoc_insertion_point(field_get:Postion.dLon)
  return _internal_dlon();
}
inline void Postion::_internal_set_dlon(double value) {
  
  dlon_ = value;
}
inline void Postion::set_dlon(double value) {
  _internal_set_dlon(value);
  // @@protoc_insertion_point(field_set:Postion.dLon)
}

// double dLat = 3;
inline void Postion::clear_dlat() {
  dlat_ = 0;
}
inline double Postion::_internal_dlat() const {
  return dlat_;
}
inline double Postion::dlat() const {
  // @@protoc_insertion_point(field_get:Postion.dLat)
  return _internal_dlat();
}
inline void Postion::_internal_set_dlat(double value) {
  
  dlat_ = value;
}
inline void Postion::set_dlat(double value) {
  _internal_set_dlat(value);
  // @@protoc_insertion_point(field_set:Postion.dLat)
}

// -------------------------------------------------------------------

// WeaponStatus

// .GunType weaponType = 1;
inline void WeaponStatus::clear_weapontype() {
  weapontype_ = 0;
}
inline ::GunType WeaponStatus::_internal_weapontype() const {
  return static_cast< ::GunType >(weapontype_);
}
inline ::GunType WeaponStatus::weapontype() const {
  // @@protoc_insertion_point(field_get:WeaponStatus.weaponType)
  return _internal_weapontype();
}
inline void WeaponStatus::_internal_set_weapontype(::GunType value) {
  
  weapontype_ = value;
}
inline void WeaponStatus::set_weapontype(::GunType value) {
  _internal_set_weapontype(value);
  // @@protoc_insertion_point(field_set:WeaponStatus.weaponType)
}

// uint32 bulletNum = 2;
inline void WeaponStatus::clear_bulletnum() {
  bulletnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WeaponStatus::_internal_bulletnum() const {
  return bulletnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WeaponStatus::bulletnum() const {
  // @@protoc_insertion_point(field_get:WeaponStatus.bulletNum)
  return _internal_bulletnum();
}
inline void WeaponStatus::_internal_set_bulletnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bulletnum_ = value;
}
inline void WeaponStatus::set_bulletnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bulletnum(value);
  // @@protoc_insertion_point(field_set:WeaponStatus.bulletNum)
}

// .Weapon_Type conType = 3;
inline void WeaponStatus::clear_contype() {
  contype_ = 0;
}
inline ::Weapon_Type WeaponStatus::_internal_contype() const {
  return static_cast< ::Weapon_Type >(contype_);
}
inline ::Weapon_Type WeaponStatus::contype() const {
  // @@protoc_insertion_point(field_get:WeaponStatus.conType)
  return _internal_contype();
}
inline void WeaponStatus::_internal_set_contype(::Weapon_Type value) {
  
  contype_ = value;
}
inline void WeaponStatus::set_contype(::Weapon_Type value) {
  _internal_set_contype(value);
  // @@protoc_insertion_point(field_set:WeaponStatus.conType)
}

// -------------------------------------------------------------------

// ConnectStatus

// bool bTK = 1;
inline void ConnectStatus::clear_btk() {
  btk_ = false;
}
inline bool ConnectStatus::_internal_btk() const {
  return btk_;
}
inline bool ConnectStatus::btk() const {
  // @@protoc_insertion_point(field_get:ConnectStatus.bTK)
  return _internal_btk();
}
inline void ConnectStatus::_internal_set_btk(bool value) {
  
  btk_ = value;
}
inline void ConnectStatus::set_btk(bool value) {
  _internal_set_btk(value);
  // @@protoc_insertion_point(field_set:ConnectStatus.bTK)
}

// bool bGPS = 2;
inline void ConnectStatus::clear_bgps() {
  bgps_ = false;
}
inline bool ConnectStatus::_internal_bgps() const {
  return bgps_;
}
inline bool ConnectStatus::bgps() const {
  // @@protoc_insertion_point(field_get:ConnectStatus.bGPS)
  return _internal_bgps();
}
inline void ConnectStatus::_internal_set_bgps(bool value) {
  
  bgps_ = value;
}
inline void ConnectStatus::set_bgps(bool value) {
  _internal_set_bgps(value);
  // @@protoc_insertion_point(field_set:ConnectStatus.bGPS)
}

// bool bStand = 3;
inline void ConnectStatus::clear_bstand() {
  bstand_ = false;
}
inline bool ConnectStatus::_internal_bstand() const {
  return bstand_;
}
inline bool ConnectStatus::bstand() const {
  // @@protoc_insertion_point(field_get:ConnectStatus.bStand)
  return _internal_bstand();
}
inline void ConnectStatus::_internal_set_bstand(bool value) {
  
  bstand_ = value;
}
inline void ConnectStatus::set_bstand(bool value) {
  _internal_set_bstand(value);
  // @@protoc_insertion_point(field_set:ConnectStatus.bStand)
}

// float fBatyValue = 4;
inline void ConnectStatus::clear_fbatyvalue() {
  fbatyvalue_ = 0;
}
inline float ConnectStatus::_internal_fbatyvalue() const {
  return fbatyvalue_;
}
inline float ConnectStatus::fbatyvalue() const {
  // @@protoc_insertion_point(field_get:ConnectStatus.fBatyValue)
  return _internal_fbatyvalue();
}
inline void ConnectStatus::_internal_set_fbatyvalue(float value) {
  
  fbatyvalue_ = value;
}
inline void ConnectStatus::set_fbatyvalue(float value) {
  _internal_set_fbatyvalue(value);
  // @@protoc_insertion_point(field_set:ConnectStatus.fBatyValue)
}

// repeated .WeaponStatus weapons = 5;
inline int ConnectStatus::_internal_weapons_size() const {
  return weapons_.size();
}
inline int ConnectStatus::weapons_size() const {
  return _internal_weapons_size();
}
inline void ConnectStatus::clear_weapons() {
  weapons_.Clear();
}
inline ::WeaponStatus* ConnectStatus::mutable_weapons(int index) {
  // @@protoc_insertion_point(field_mutable:ConnectStatus.weapons)
  return weapons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WeaponStatus >*
ConnectStatus::mutable_weapons() {
  // @@protoc_insertion_point(field_mutable_list:ConnectStatus.weapons)
  return &weapons_;
}
inline const ::WeaponStatus& ConnectStatus::_internal_weapons(int index) const {
  return weapons_.Get(index);
}
inline const ::WeaponStatus& ConnectStatus::weapons(int index) const {
  // @@protoc_insertion_point(field_get:ConnectStatus.weapons)
  return _internal_weapons(index);
}
inline ::WeaponStatus* ConnectStatus::_internal_add_weapons() {
  return weapons_.Add();
}
inline ::WeaponStatus* ConnectStatus::add_weapons() {
  // @@protoc_insertion_point(field_add:ConnectStatus.weapons)
  return _internal_add_weapons();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WeaponStatus >&
ConnectStatus::weapons() const {
  // @@protoc_insertion_point(field_list:ConnectStatus.weapons)
  return weapons_;
}

// -------------------------------------------------------------------

// PersonInfo

// uint32 id = 1;
inline void PersonInfo::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PersonInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PersonInfo::id() const {
  // @@protoc_insertion_point(field_get:PersonInfo.id)
  return _internal_id();
}
inline void PersonInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void PersonInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PersonInfo.id)
}

// int32 hearth = 2;
inline void PersonInfo::clear_hearth() {
  hearth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::_internal_hearth() const {
  return hearth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersonInfo::hearth() const {
  // @@protoc_insertion_point(field_get:PersonInfo.hearth)
  return _internal_hearth();
}
inline void PersonInfo::_internal_set_hearth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hearth_ = value;
}
inline void PersonInfo::set_hearth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hearth(value);
  // @@protoc_insertion_point(field_set:PersonInfo.hearth)
}

// uint32 reLive = 3;
inline void PersonInfo::clear_relive() {
  relive_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PersonInfo::_internal_relive() const {
  return relive_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PersonInfo::relive() const {
  // @@protoc_insertion_point(field_get:PersonInfo.reLive)
  return _internal_relive();
}
inline void PersonInfo::_internal_set_relive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  relive_ = value;
}
inline void PersonInfo::set_relive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_relive(value);
  // @@protoc_insertion_point(field_set:PersonInfo.reLive)
}

// uint32 setDeath = 4;
inline void PersonInfo::clear_setdeath() {
  setdeath_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PersonInfo::_internal_setdeath() const {
  return setdeath_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PersonInfo::setdeath() const {
  // @@protoc_insertion_point(field_get:PersonInfo.setDeath)
  return _internal_setdeath();
}
inline void PersonInfo::_internal_set_setdeath(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  setdeath_ = value;
}
inline void PersonInfo::set_setdeath(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_setdeath(value);
  // @@protoc_insertion_point(field_set:PersonInfo.setDeath)
}

// .ConnectStatus curtStatus = 5;
inline bool PersonInfo::_internal_has_curtstatus() const {
  return this != internal_default_instance() && curtstatus_ != nullptr;
}
inline bool PersonInfo::has_curtstatus() const {
  return _internal_has_curtstatus();
}
inline void PersonInfo::clear_curtstatus() {
  if (GetArena() == nullptr && curtstatus_ != nullptr) {
    delete curtstatus_;
  }
  curtstatus_ = nullptr;
}
inline const ::ConnectStatus& PersonInfo::_internal_curtstatus() const {
  const ::ConnectStatus* p = curtstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::ConnectStatus&>(
      ::_ConnectStatus_default_instance_);
}
inline const ::ConnectStatus& PersonInfo::curtstatus() const {
  // @@protoc_insertion_point(field_get:PersonInfo.curtStatus)
  return _internal_curtstatus();
}
inline void PersonInfo::unsafe_arena_set_allocated_curtstatus(
    ::ConnectStatus* curtstatus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(curtstatus_);
  }
  curtstatus_ = curtstatus;
  if (curtstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PersonInfo.curtStatus)
}
inline ::ConnectStatus* PersonInfo::release_curtstatus() {
  
  ::ConnectStatus* temp = curtstatus_;
  curtstatus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ConnectStatus* PersonInfo::unsafe_arena_release_curtstatus() {
  // @@protoc_insertion_point(field_release:PersonInfo.curtStatus)
  
  ::ConnectStatus* temp = curtstatus_;
  curtstatus_ = nullptr;
  return temp;
}
inline ::ConnectStatus* PersonInfo::_internal_mutable_curtstatus() {
  
  if (curtstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConnectStatus>(GetArena());
    curtstatus_ = p;
  }
  return curtstatus_;
}
inline ::ConnectStatus* PersonInfo::mutable_curtstatus() {
  // @@protoc_insertion_point(field_mutable:PersonInfo.curtStatus)
  return _internal_mutable_curtstatus();
}
inline void PersonInfo::set_allocated_curtstatus(::ConnectStatus* curtstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete curtstatus_;
  }
  if (curtstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(curtstatus);
    if (message_arena != submessage_arena) {
      curtstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curtstatus, submessage_arena);
    }
    
  } else {
    
  }
  curtstatus_ = curtstatus;
  // @@protoc_insertion_point(field_set_allocated:PersonInfo.curtStatus)
}

// .Postion curtPos = 6;
inline bool PersonInfo::_internal_has_curtpos() const {
  return this != internal_default_instance() && curtpos_ != nullptr;
}
inline bool PersonInfo::has_curtpos() const {
  return _internal_has_curtpos();
}
inline void PersonInfo::clear_curtpos() {
  if (GetArena() == nullptr && curtpos_ != nullptr) {
    delete curtpos_;
  }
  curtpos_ = nullptr;
}
inline const ::Postion& PersonInfo::_internal_curtpos() const {
  const ::Postion* p = curtpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Postion&>(
      ::_Postion_default_instance_);
}
inline const ::Postion& PersonInfo::curtpos() const {
  // @@protoc_insertion_point(field_get:PersonInfo.curtPos)
  return _internal_curtpos();
}
inline void PersonInfo::unsafe_arena_set_allocated_curtpos(
    ::Postion* curtpos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(curtpos_);
  }
  curtpos_ = curtpos;
  if (curtpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PersonInfo.curtPos)
}
inline ::Postion* PersonInfo::release_curtpos() {
  
  ::Postion* temp = curtpos_;
  curtpos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Postion* PersonInfo::unsafe_arena_release_curtpos() {
  // @@protoc_insertion_point(field_release:PersonInfo.curtPos)
  
  ::Postion* temp = curtpos_;
  curtpos_ = nullptr;
  return temp;
}
inline ::Postion* PersonInfo::_internal_mutable_curtpos() {
  
  if (curtpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Postion>(GetArena());
    curtpos_ = p;
  }
  return curtpos_;
}
inline ::Postion* PersonInfo::mutable_curtpos() {
  // @@protoc_insertion_point(field_mutable:PersonInfo.curtPos)
  return _internal_mutable_curtpos();
}
inline void PersonInfo::set_allocated_curtpos(::Postion* curtpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete curtpos_;
  }
  if (curtpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(curtpos);
    if (message_arena != submessage_arena) {
      curtpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curtpos, submessage_arena);
    }
    
  } else {
    
  }
  curtpos_ = curtpos;
  // @@protoc_insertion_point(field_set_allocated:PersonInfo.curtPos)
}

// repeated .HurtInfo hurtInfo = 7;
inline int PersonInfo::_internal_hurtinfo_size() const {
  return hurtinfo_.size();
}
inline int PersonInfo::hurtinfo_size() const {
  return _internal_hurtinfo_size();
}
inline void PersonInfo::clear_hurtinfo() {
  hurtinfo_.Clear();
}
inline ::HurtInfo* PersonInfo::mutable_hurtinfo(int index) {
  // @@protoc_insertion_point(field_mutable:PersonInfo.hurtInfo)
  return hurtinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HurtInfo >*
PersonInfo::mutable_hurtinfo() {
  // @@protoc_insertion_point(field_mutable_list:PersonInfo.hurtInfo)
  return &hurtinfo_;
}
inline const ::HurtInfo& PersonInfo::_internal_hurtinfo(int index) const {
  return hurtinfo_.Get(index);
}
inline const ::HurtInfo& PersonInfo::hurtinfo(int index) const {
  // @@protoc_insertion_point(field_get:PersonInfo.hurtInfo)
  return _internal_hurtinfo(index);
}
inline ::HurtInfo* PersonInfo::_internal_add_hurtinfo() {
  return hurtinfo_.Add();
}
inline ::HurtInfo* PersonInfo::add_hurtinfo() {
  // @@protoc_insertion_point(field_add:PersonInfo.hurtInfo)
  return _internal_add_hurtinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HurtInfo >&
PersonInfo::hurtinfo() const {
  // @@protoc_insertion_point(field_list:PersonInfo.hurtInfo)
  return hurtinfo_;
}

// repeated .HurtInfo hitInfo = 8;
inline int PersonInfo::_internal_hitinfo_size() const {
  return hitinfo_.size();
}
inline int PersonInfo::hitinfo_size() const {
  return _internal_hitinfo_size();
}
inline void PersonInfo::clear_hitinfo() {
  hitinfo_.Clear();
}
inline ::HurtInfo* PersonInfo::mutable_hitinfo(int index) {
  // @@protoc_insertion_point(field_mutable:PersonInfo.hitInfo)
  return hitinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HurtInfo >*
PersonInfo::mutable_hitinfo() {
  // @@protoc_insertion_point(field_mutable_list:PersonInfo.hitInfo)
  return &hitinfo_;
}
inline const ::HurtInfo& PersonInfo::_internal_hitinfo(int index) const {
  return hitinfo_.Get(index);
}
inline const ::HurtInfo& PersonInfo::hitinfo(int index) const {
  // @@protoc_insertion_point(field_get:PersonInfo.hitInfo)
  return _internal_hitinfo(index);
}
inline ::HurtInfo* PersonInfo::_internal_add_hitinfo() {
  return hitinfo_.Add();
}
inline ::HurtInfo* PersonInfo::add_hitinfo() {
  // @@protoc_insertion_point(field_add:PersonInfo.hitInfo)
  return _internal_add_hitinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HurtInfo >&
PersonInfo::hitinfo() const {
  // @@protoc_insertion_point(field_list:PersonInfo.hitInfo)
  return hitinfo_;
}

// string name = 9;
inline void PersonInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PersonInfo::name() const {
  // @@protoc_insertion_point(field_get:PersonInfo.name)
  return _internal_name();
}
inline void PersonInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PersonInfo.name)
}
inline std::string* PersonInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PersonInfo.name)
  return _internal_mutable_name();
}
inline const std::string& PersonInfo::_internal_name() const {
  return name_.Get();
}
inline void PersonInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PersonInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PersonInfo.name)
}
inline void PersonInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PersonInfo.name)
}
inline void PersonInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PersonInfo.name)
}
inline std::string* PersonInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PersonInfo::release_name() {
  // @@protoc_insertion_point(field_release:PersonInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PersonInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PersonInfo.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PersonInfo_2eproto
